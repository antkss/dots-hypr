// config.js
import Gdk6 from "gi://Gdk";
import GLib12 from "gi://GLib";
import { App } from "astal/gtk3"
import * as Utils27 from "resource:///com/github/Aylur/ags/utils.js";

// user_options.js
var userConfigOptions = {
  // For every option, see ~/.config/ags/modules/.configuration/user_options.js
  // (vscode users ctrl+click this: file://./modules/.configuration/user_options.js)
  // (vim users: `:vsp` to split window, move cursor to this path, press `gf`. `Ctrl-w` twice to switch between)
  //   options listed in this file will override the default ones in the above file
  // Here's an example
  "keybinds": {
    "sidebar": {
      "pin": "Ctrl+p",
      "nextTab": "Ctrl+Page_Down",
      "prevTab": "Ctrl+Page_Up"
    }
  }
};
var user_options_default = userConfigOptions;

// modules/.configuration/user_options.js
var configOptions = {
  // General stuff
  "ai": {
    "defaultGPTProvider": "openai",
    "defaultTemperature": 0.7,
    "enhancements": true,
    "useHistory": false
    // 'writingCursor': " ...", // Warning: Using weird characters can mess up Markdown rendering
  },
  "animations": {
    "durationSmall": 110,
    "durationLarge": 300
  },
  "apps": {
    "imageViewer": "loupe",
    "terminal": "foot"
    // This is only for shell actions
  },
  "battery": {
    "low": 20,
    "critical": 10
  },
  "music": {
    "preferredPlayer": "plasma-browser-integration"
  },
  "onScreenKeyboard": {
    "layout": "qwerty_full"
    // See modules/onscreenkeyboard/onscreenkeyboard.js for available layouts
  },
  "overview": {
    "scale": 0.18,
    // Relative to screen size
    "numOfRows": 2,
    "numOfCols": 5,
    "wsNumScale": 0.09,
    "wsNumMarginScale": 0.07
  },
  "sidebar": {
    "imageColumns": 2,
    "imageBooruCount": 20,
    "imageAllowNsfw": false
  },
  "search": {
    "engineBaseUrl": "https://www.google.com/search?q=",
    "excludedSites": ["quora.com"]
  },
  "time": {
    // See https://docs.gtk.org/glib/method.DateTime.format.html
    // Here's the 12h format: "%I:%M%P"
    // For seconds, add "%S" and set interval to 1000
    "format": "%H:%M",
    "interval": 5e3,
    "dateFormatLong": "%A, %d/%m",
    // On bar
    "dateInterval": 5e3,
    "dateFormat": "%d/%m"
    // On notif time
  },
  "weather": {
    "city": ""
  },
  "workspaces": {
    "shown": 10
  },
  // Longer stuff
  "icons": {
    substitutions: {
      "code-url-handler": "visual-studio-code",
      "Code": "visual-studio-code",
      "GitHub Desktop": "github-desktop",
      "Minecraft* 1.20.1": "minecraft",
      "gnome-tweaks": "org.gnome.tweaks",
      "pavucontrol-qt": "pavucontrol",
      "wps": "wps-office2019-kprometheus",
      "wpsoffice": "wps-office2019-kprometheus",
      "": "image-missing"
    }
  },
  "keybinds": {
    // Format: Mod1+Mod2+key. CaSe SeNsItIvE!
    // Modifiers: Shift Ctrl Alt Hyper Meta
    // See https://docs.gtk.org/gdk3/index.html#constants for the other keys (they are listed as KEY_key)
    "overview": {
      "altMoveLeft": "Ctrl+b",
      "altMoveRight": "Ctrl+f",
      "deleteToEnd": "Ctrl+k"
    },
    "sidebar": {
      "apis": {
        "nextTab": "Page_Down",
        "prevTab": "Page_Up"
      },
      "pin": "Ctrl+p",
      "cycleTab": "Ctrl+Tab",
      "nextTab": "Ctrl+Page_Down",
      "prevTab": "Ctrl+Page_Up"
    }
  }
};
function overrideConfigRecursive(userOverrides, configOptions2 = {}) {
  for (const [key, value] of Object.entries(userOverrides)) {
    if (typeof value === "object") {
      overrideConfigRecursive(value, configOptions2[key]);
    } else {
      configOptions2[key] = value;
    }
  }
}
overrideConfigRecursive(user_options_default, configOptions);
globalThis["userOptions"] = configOptions;

// modules/bar/main.js
import Widget10 from "resource:///com/github/Aylur/ags/widget.js";

// variables.js
import Variable from "resource:///com/github/Aylur/ags/variable.js";
import Mpris from "resource:///com/github/Aylur/ags/service/mpris.js";
var { Gtk } = imports.gi;
var { exec } = Utils;
Gtk.IconTheme.get_default().append_search_path(`${App.configDir}/assets/icons`);
var showMusicControls = Variable(false, {});
var showColorScheme = Variable(false, {});
globalThis["openMusicControls"] = showMusicControls;
globalThis["openColorScheme"] = showColorScheme;
globalThis["mpris"] = Mpris;
var SCREEN_WIDTH = 1366;
var currentShellMode = Variable("normal", {});
globalThis["currentMode"] = currentShellMode;
globalThis["cycleMode"] = () => {
  if (currentShellMode.value === "normal") {
    currentShellMode.value = "focus";
  } else {
    currentShellMode.value = "normal";
  }
};

// modules/bar/normal/spaceleft.js
import Widget from "resource:///com/github/Aylur/ags/widget.js";

// services/indicator.js
import Service2 from "resource:///com/github/Aylur/ags/service.js";
import * as Utils2 from "resource:///com/github/Aylur/ags/utils.js";
var IndicatorService = class extends Service2 {
  static {
    Service2.register(
      this,
      { "popup": ["double"] }
    );
  }
  _delay = 1500;
  _count = 0;
  popup(value) {
    this.emit("popup", value);
    this._count++;
    Utils2.timeout(this._delay, () => {
      this._count--;
      if (this._count === 0)
        this.emit("popup", -1);
    });
  }
  connectWidget(widget, callback) {
    connect(this, widget, callback, "popup");
  }
};
var service = new IndicatorService();
globalThis["indicator"] = service;
var indicator_default = service;

// modules/bar/normal/spaceleft.js
import * as Utils3 from "resource:///com/github/Aylur/ags/utils.js";
var Hyprland = (await import("resource:///com/github/Aylur/ags/service/hyprland.js")).default;
var spaceleft_default = () => Widget.EventBox({
  hexpand: true,
  vexpand: true,
  onScrollUp: () => {
    Utils3.execAsync([`bash`, `-c`, `brightnessctl set 2%+`]);
    indicator_default.popup(1);
  },
  onScrollDown: () => {
    Utils3.execAsync([`bash`, `-c`, `brightnessctl set 2%-`]);
    indicator_default.popup(1);
  },
  child: Widget.Box({
    css: `margin-left: 11px;margin-top:4px;`,
    vertical: true,
    children: [
      Widget.Label({
        xalign: 0,
        truncate: "end",
        maxWidthChars: 10,
        // Doesn't matter, just needs to be non negative
        className: "txt-smaller bar-wintitle-topdesc txt",
        setup: (self) => self.hook(Hyprland.active.client, (label) => {
          label.label = Hyprland.active.client.class.length === 0 ? "Desktop" : Hyprland.active.client.class;
        })
      }),
      Widget.Label({
        xalign: 0,
        truncate: "end",
        maxWidthChars: 10,
        // Doesn't matter, just needs to be non negative
        className: "txt-smallie bar-wintitle-txt",
        setup: (self) => self.hook(Hyprland.active.client, (label) => {
          label.label = Hyprland.active.client.title.length === 0 ? `Workspace ${Hyprland.active.workspace.id}` : Hyprland.active.client.title;
        })
      })
    ]
  })
});

// modules/bar/normal/spaceright.js
import App3 from "resource:///com/github/Aylur/ags/app.js";
import Widget5 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils5 from "resource:///com/github/Aylur/ags/utils.js";
import Audio from "resource:///com/github/Aylur/ags/service/audio.js";
import SystemTray2 from "resource:///com/github/Aylur/ags/service/systemtray.js";

// modules/.commonwidgets/statusicons.js
import App2 from "resource:///com/github/Aylur/ags/app.js";
import Widget3 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils4 from "resource:///com/github/Aylur/ags/utils.js";

// modules/.commonwidgets/materialicon.js
import Widget2 from "resource:///com/github/Aylur/ags/widget.js";
var MaterialIcon = (icon, size, props = {}) => Widget2.Label({
  className: `icon-material txt-${size}`,
  label: icon,
  ...props
});

// modules/.commonwidgets/statusicons.js
import Bluetooth from "resource:///com/github/Aylur/ags/service/bluetooth.js";
import Network from "resource:///com/github/Aylur/ags/service/network.js";
import Notifications from "resource:///com/github/Aylur/ags/service/notifications.js";

// modules/.commonwidgets/statusicons_languages.js
var languages = [
  {
    layout: "us",
    name: "English (US)",
    flag: "\u{1F1FA}\u{1F1F8}"
  },
  {
    layout: "ru",
    name: "Russian",
    flag: "\u{1F1F7}\u{1F1FA}"
  },
  {
    layout: "pl",
    name: "Polish",
    flag: "\u{1F1F7}\u{1F1F5}\u{1F1F5}\u{1F1F1}"
  },
  {
    layout: "ro",
    name: "Romanian",
    flag: "\u{1F1F7}\u{1F1F4}"
  },
  {
    layout: "ca",
    name: "French (Canada)",
    flag: "\u{1F1EB}\u{1F1F7}"
  },
  {
    layout: "fr",
    name: "French",
    flag: "\u{1F1EB}\u{1F1F7}"
  },
  {
    layout: "tr",
    name: "Turkish",
    flag: "\u{1F1F9}\u{1F1F7}"
  },
  {
    layout: "jp",
    name: "Japanese",
    flag: "\u{1F1EF}\u{1F1F5}"
  },
  {
    layout: "cn",
    name: "Chinese",
    flag: "\u{1F1E8}\u{1F1F3}"
  },
  {
    layout: "vn",
    name: "Vietnamese",
    flag: "\u{1F1FB}\u{1F1F3}"
  },
  {
    layout: "undef",
    name: "Undefined",
    flag: "\u{1F9D0}"
  }
];

// modules/.commonwidgets/statusicons.js
function isLanguageMatch(abbreviation, word) {
  const lowerAbbreviation = abbreviation.toLowerCase();
  const lowerWord = word.toLowerCase();
  let j = 0;
  for (let i = 0; i < lowerWord.length; i++) {
    if (lowerWord[i] === lowerAbbreviation[j]) {
      j++;
    }
    if (j === lowerAbbreviation.length) {
      return true;
    }
  }
  return false;
}
var NotificationIndicator = (notifCenterName = "sideright") => {
  const widget = Widget3.Revealer({
    transition: 150,
    revealChild: false,
    setup: (self) => self.hook(Notifications, (self2, id) => {
      if (!id || Notifications.dnd) return;
      if (!Notifications.getNotification(id)) return;
      self2.revealChild = true;
    }, "notified").hook(App2, (self2, currentName, visible) => {
      if (visible && currentName === notifCenterName) {
        self2.revealChild = false;
      }
    }),
    child: Widget3.Box({
      children: [
        MaterialIcon("notifications", "norm"),
        Widget3.Label({
          className: "txt-small titlefont",
          attribute: {
            unreadCount: 0,
            update: (self) => self.label = `${self.attribute.unreadCount}`
          },
          setup: (self) => self.hook(Notifications, (self2, id) => {
            if (!id || Notifications.dnd) return;
            if (!Notifications.getNotification(id)) return;
            self2.attribute.unreadCount++;
            self2.attribute.update(self2);
          }, "notified").hook(App2, (self2, currentName, visible) => {
            if (visible && currentName === notifCenterName) {
              self2.attribute.unreadCount = 0;
              self2.attribute.update(self2);
            }
          })
        })
      ]
    })
  });
  return widget;
};
var BluetoothIndicator = () => Widget3.Stack({
  transition: "slide_up_down",
  children: {
    "false": Widget3.Label({ className: "txt-norm icon-material", label: "bluetooth_disabled" }),
    "true": Widget3.Label({ className: "txt-norm icon-material", label: "bluetooth" })
  },
  setup: (self) => self.hook(Bluetooth, (stack) => {
    stack.shown = String(Bluetooth.enabled);
  })
});
var BluetoothDevices = () => Widget3.Box({
  className: "spacing-h-5",
  setup: (self) => self.hook(Bluetooth, (self2) => {
    self2.children = Bluetooth.connected_devices.map((device) => {
      return Widget3.Box({
        className: "bar-bluetooth-device spacing-h-5",
        vpack: "center",
        tooltipText: device.name,
        children: [
          Widget3.Icon(`${device.iconName}-symbolic`),
          device.batteryPercentage ? Widget3.Label({
            className: "txt-smallie",
            label: `${device.batteryPercentage}`,
            setup: (self3) => {
              self3.hook(device, (self4) => {
                self4.label = `${device.batteryPercentage}`;
              }, "notify::batteryPercentage");
            }
          }) : null
        ]
      });
    });
    self2.visible = Bluetooth.connected_devices.length > 0;
  }, "notify::connected-devices")
});
var NetworkWiredIndicator = () => Widget3.Stack({
  transition: "slide_up_down",
  children: {
    "fallback": SimpleNetworkIndicator(),
    "unknown": Widget3.Label({ className: "txt-norm icon-material", label: "wifi_off" }),
    "disconnected": Widget3.Label({ className: "txt-norm icon-material", label: "signal_wifi_off" }),
    "connected": Widget3.Label({ className: "txt-norm icon-material", label: "lan" }),
    "connecting": Widget3.Label({ className: "txt-norm icon-material", label: "settings_ethernet" })
  },
  setup: (self) => self.hook(Network, (stack) => {
    if (!Network.wired)
      return;
    const { internet } = Network.wired;
    if (["connecting", "connected"].includes(internet))
      stack.shown = internet;
    else if (Network.connectivity !== "full")
      stack.shown = "disconnected";
    else
      stack.shown = "fallback";
  })
});
var SimpleNetworkIndicator = () => Widget3.Icon({
  setup: (self) => self.hook(Network, (self2) => {
    const icon = Network[Network.primary || "wifi"]?.iconName;
    self2.icon = icon || "";
    self2.visible = icon;
  })
});
var NetworkWifiIndicator = () => Widget3.Stack({
  transition: "slide_up_down",
  children: {
    "disabled": Widget3.Label({ className: "txt-norm icon-material", label: "wifi_off" }),
    "disconnected": Widget3.Label({ className: "txt-norm icon-material", label: "signal_wifi_off" }),
    "connecting": Widget3.Label({ className: "txt-norm icon-material", label: "settings_ethernet" }),
    "0": Widget3.Label({ className: "txt-norm icon-material", label: "signal_wifi_0_bar" }),
    "1": Widget3.Label({ className: "txt-norm icon-material", label: "network_wifi_1_bar" }),
    "2": Widget3.Label({ className: "txt-norm icon-material", label: "network_wifi_2_bar" }),
    "3": Widget3.Label({ className: "txt-norm icon-material", label: "network_wifi_3_bar" }),
    "4": Widget3.Label({ className: "txt-norm icon-material", label: "signal_wifi_4_bar" })
  },
  setup: (self) => self.hook(Network, (stack) => {
    if (!Network.wifi) {
      return;
    }
    if (Network.wifi.internet == "connected") {
      stack.shown = String(Math.ceil(Network.wifi.strength / 25));
    } else if (["disconnected", "connecting"].includes(Network.wifi.internet)) {
      stack.shown = Network.wifi.internet;
    }
  })
});
var NetworkIndicator = () => Widget3.Stack({
  transition: "slide_up_down",
  children: {
    "fallback": SimpleNetworkIndicator(),
    "wifi": NetworkWifiIndicator(),
    "wired": NetworkWiredIndicator()
  },
  setup: (self) => self.hook(Network, (stack) => {
    if (!Network.primary) {
      stack.shown = "wifi";
      return;
    }
    const primary = Network.primary || "fallback";
    if (["wifi", "wired"].includes(primary))
      stack.shown = primary;
    else
      stack.shown = "fallback";
  })
});
var HyprlandXkbKeyboardLayout = async ({ useFlag } = {}) => {
  try {
    const Hyprland3 = (await import("resource:///com/github/Aylur/ags/service/hyprland.js")).default;
    var initLangs = [];
    var languageStackArray = [];
    var currentKeyboard;
    const updateCurrentKeyboards = () => {
      currentKeyboard = JSON.parse(Utils4.exec("hyprctl -j devices")).keyboards.find((device) => device.name === "at-translated-set-2-keyboard");
      if (currentKeyboard) {
        initLangs = currentKeyboard.layout.split(",").map((lang) => lang.trim());
      }
      languageStackArray = Array.from({ length: initLangs.length }, (_, i) => {
        const lang = languages.find((lang2) => lang2.layout == initLangs[i]);
        if (!lang) return {
          [initLangs[i]]: Widget3.Label({ label: initLangs[i] })
        };
        return {
          [lang.layout]: Widget3.Label({ label: useFlag ? lang.flag : lang.layout })
        };
      });
    };
    updateCurrentKeyboards();
    const widgetRevealer = Widget3.Revealer({
      transition: 150,
      revealChild: languageStackArray.length > 1
    });
    const widgetKids = {
      ...languageStackArray.reduce((obj, lang) => {
        return { ...obj, ...lang };
      }, {}),
      "undef": Widget3.Label({ label: "?" })
    };
    const widgetContent2 = Widget3.Stack({
      transition: "slide_up_down",
      children: widgetKids,
      setup: (self) => self.hook(Hyprland3, (stack, kbName, layoutName) => {
        if (!kbName) {
          return;
        }
        var lang = languages.find((lang2) => layoutName.includes(lang2.name));
        if (lang) {
          widgetContent2.shown = lang.layout;
        } else {
          lang = languageStackArray.find((lang2) => isLanguageMatch(lang2[0], layoutName));
          if (!lang) stack.shown = "undef";
          else stack.shown = lang[0];
        }
      }, "keyboard-layout")
    });
    widgetRevealer.child = widgetContent2;
    return widgetRevealer;
  } catch {
    return null;
  }
};
var OptionalKeyboardLayout = async () => {
  try {
    return await HyprlandXkbKeyboardLayout({ useFlag: false });
  } catch {
    return null;
  }
};
var optionalKeyboardLayoutInstance = await OptionalKeyboardLayout();
var StatusIcons = (props = {}) => Widget3.Box({
  ...props,
  child: Widget3.Box({
    className: "spacing-h-15",
    children: [
      optionalKeyboardLayoutInstance,
      NotificationIndicator(),
      NetworkIndicator(),
      Widget3.Box({
        className: "spacing-h-5",
        children: [BluetoothIndicator(), BluetoothDevices()]
      })
    ]
  })
});

// modules/bar/normal/tray.js
import Widget4 from "resource:///com/github/Aylur/ags/widget.js";
import SystemTray from "resource:///com/github/Aylur/ags/service/systemtray.js";
var { Box, Icon, Button } = Widget4;
var { Gravity } = imports.gi.Gdk;
var SysTrayItem = (item) => Button({
  className: "bar-systray-item",
  child: Icon({
    hpack: "center",
    icon: item.icon,
    setup: (self) => self.hook(item, (self2) => self2.icon = item.icon)
  }),
  setup: (self) => self.hook(item, (self2) => self2.tooltipMarkup = item["tooltip-markup"]),
  onPrimaryClick: (_, event) => item.activate(event),
  onSecondaryClick: (btn, event) => item.menu.popup_at_widget(btn, Gravity.SOUTH, Gravity.NORTH, null)
});
var Tray = (props = {}) => {
  const trayContent = Box({
    className: "margin-right-5 spacing-h-15",
    setup: (self) => self.hook(SystemTray, (self2) => {
      self2.children = SystemTray.items.map(SysTrayItem);
      self2.show_all();
    })
  });
  const trayRevealer = Widget4.Revealer({
    revealChild: true,
    // transition: 'slide_left',
    // transitionDuration: userOptions.animations.durationLarge,
    child: trayContent
  });
  return Box({
    ...props,
    children: [trayRevealer]
  });
};

// modules/bar/normal/spaceright.js
var spaceright_default = () => {
  const barTray = Tray();
  const separatorDot = Widget5.Revealer({
    // transition: 'slide_left',
    revealChild: false,
    attribute: {
      "count": SystemTray2.items.length,
      "update": (self, diff) => {
        self.attribute.count += diff;
        self.revealChild = self.attribute.count > 0;
      }
    },
    child: Widget5.Box({
      vpack: "center",
      className: "separator-circle"
    }),
    setup: (self) => self.hook(SystemTray2, (self2) => self2.attribute.update(self2, 1), "added").hook(SystemTray2, (self2) => self2.attribute.update(self2, -1), "removed")
  });
  const barStatusIcons = StatusIcons({
    className: "bar-statusicons",
    setup: (self) => self.hook(App3, (self2, currentName, visible) => {
      if (currentName === "sideright") {
        self2.toggleClassName("bar-statusicons-active", visible);
      }
    })
  });
  const SpaceRightDefaultClicks = (child) => Widget5.EventBox({
    onHover: () => {
      barStatusIcons.toggleClassName("bar-statusicons-hover", true);
    },
    onHoverLost: () => {
      barStatusIcons.toggleClassName("bar-statusicons-hover", false);
    },
    child
  });
  const emptyArea = SpaceRightDefaultClicks(Widget5.Box({ hexpand: true }));
  const indicatorArea = SpaceRightDefaultClicks(Widget5.Box({
    children: [
      separatorDot,
      barStatusIcons
    ]
  }));
  const actualContent = Widget5.Box({
    hexpand: true,
    className: "spacing-h-5 bar-spaceright",
    children: [
      emptyArea,
      barTray,
      indicatorArea
    ]
  });
  return Widget5.EventBox({
    onScrollUp: () => {
      if (!Audio.speaker) return;
      if (Audio.speaker.volume <= 0.09) Audio.speaker.volume += 0.01;
      else Audio.speaker.volume += 0.03;
      indicator_default.popup(1);
    },
    onScrollDown: () => {
      if (!Audio.speaker) return;
      if (Audio.speaker.volume <= 0.09) Audio.speaker.volume -= 0.01;
      else Audio.speaker.volume -= 0.03;
      indicator_default.popup(1);
    },
    onPrimaryClick: () => Utils5.execAsync(["bash", "-c", "xfce4-appearance-settings", "&"]),
    child: Widget5.Box({
      children: [
        actualContent
        // SpaceRightDefaultClicks(Widget.Box({ className: 'bar-corner-spacing' })),
      ]
    })
  });
};

// modules/bar/normal/music.js
import Widget7 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils7 from "resource:///com/github/Aylur/ags/utils.js";
import Mpris2 from "resource:///com/github/Aylur/ags/service/mpris.js";

// modules/.commonwidgets/cairo_circularprogress.js
import Widget6 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils6 from "resource:///com/github/Aylur/ags/utils.js";
var { Gtk: Gtk2 } = imports.gi;
var Lang = imports.lang;
var AnimatedCircProg = ({
  initFrom = 0,
  initTo = 0,
  initAnimTime = 2900,
  initAnimPoints = 1,
  extraSetup = () => {
  },
  ...rest
}) => Widget6.DrawingArea({
  ...rest,
  css: `${initFrom != initTo ? "font-size: " + initFrom + "px; transition: " + initAnimTime + "ms linear;" : ""}`,
  setup: (area) => {
    const styleContext = area.get_style_context();
    const width = styleContext.get_property("min-height", Gtk2.StateFlags.NORMAL);
    const height = styleContext.get_property("min-height", Gtk2.StateFlags.NORMAL);
    const padding = styleContext.get_padding(Gtk2.StateFlags.NORMAL).left;
    const marginLeft = styleContext.get_margin(Gtk2.StateFlags.NORMAL).left;
    const marginRight = styleContext.get_margin(Gtk2.StateFlags.NORMAL).right;
    const marginTop = styleContext.get_margin(Gtk2.StateFlags.NORMAL).top;
    const marginBottom = styleContext.get_margin(Gtk2.StateFlags.NORMAL).bottom;
    area.set_size_request(width + marginLeft + marginRight, height + marginTop + marginBottom);
    area.connect("draw", Lang.bind(area, (area2, cr) => {
      const styleContext2 = area2.get_style_context();
      const width2 = styleContext2.get_property("min-height", Gtk2.StateFlags.NORMAL);
      const height2 = styleContext2.get_property("min-height", Gtk2.StateFlags.NORMAL);
      const padding2 = styleContext2.get_padding(Gtk2.StateFlags.NORMAL).left;
      const marginLeft2 = styleContext2.get_margin(Gtk2.StateFlags.NORMAL).left;
      const marginRight2 = styleContext2.get_margin(Gtk2.StateFlags.NORMAL).right;
      const marginTop2 = styleContext2.get_margin(Gtk2.StateFlags.NORMAL).top;
      const marginBottom2 = styleContext2.get_margin(Gtk2.StateFlags.NORMAL).bottom;
      area2.set_size_request(width2 + marginLeft2 + marginRight2, height2 + marginTop2 + marginBottom2);
      const progressValue = styleContext2.get_property("font-size", Gtk2.StateFlags.NORMAL) / 100;
      const bg_stroke = styleContext2.get_property("min-width", Gtk2.StateFlags.NORMAL);
      const fg_stroke = bg_stroke - padding2;
      const radius = Math.min(width2, height2) / 2 - Math.max(bg_stroke, fg_stroke) / 2;
      const center_x = width2 / 2 + marginLeft2;
      const center_y = height2 / 2 + marginTop2;
      const start_angle = -Math.PI / 2;
      const end_angle = start_angle + 2 * Math.PI * progressValue;
      const start_x = center_x + Math.cos(start_angle) * radius;
      const start_y = center_y + Math.sin(start_angle) * radius;
      const end_x = center_x + Math.cos(end_angle) * radius;
      const end_y = center_y + Math.sin(end_angle) * radius;
      const background_color = styleContext2.get_property("background-color", Gtk2.StateFlags.NORMAL);
      cr.setSourceRGBA(background_color.red, background_color.green, background_color.blue, background_color.alpha);
      cr.arc(center_x, center_y, radius, 0, 2 * Math.PI);
      cr.setLineWidth(bg_stroke);
      cr.stroke();
      if (progressValue == 0) return;
      const color = styleContext2.get_property("color", Gtk2.StateFlags.NORMAL);
      cr.setSourceRGBA(color.red, color.green, color.blue, color.alpha);
      cr.arc(center_x, center_y, radius, start_angle, end_angle);
      cr.setLineWidth(fg_stroke);
      cr.stroke();
      cr.setLineWidth(0);
      cr.arc(start_x, start_y, fg_stroke / 2, 0, 0 - 0.01);
      cr.fill();
      cr.arc(end_x, end_y, fg_stroke / 2, 0, 0 - 0.01);
      cr.fill();
    }));
    if (initFrom != initTo) {
      area.css = `font-size: ${initFrom}px; transition: ${initAnimTime}ms linear;`;
      Utils6.timeout(20, () => {
        area.css = `font-size: ${initTo}px;`;
      }, area);
      const transitionDistance = initTo - initFrom;
      const oneStep = initAnimTime / initAnimPoints;
      area.css = `
                font-size: ${initFrom}px;
                transition: ${oneStep}ms linear;
            `;
      for (let i = 0; i < initAnimPoints; i++) {
        Utils6.timeout(Math.max(10, i * oneStep), () => {
          if (!area) return;
          area.css = `${initFrom != initTo ? "font-size: " + (initFrom + transitionDistance / initAnimPoints * (i + 1)) + "px;" : ""}`;
        });
      }
    } else area.css = "font-size: 0px;";
    extraSetup(area);
  }
});

// modules/bar/normal/music.js
var { GLib } = imports.gi;
var { Box: Box2, EventBox, Label, Overlay } = Widget7;
var { execAsync: execAsync3 } = Utils7;
function trimTrackTitle(title) {
  if (!title) return "";
  const cleanPatterns = [
    /【[^】]*】/,
    // Touhou n weeb stuff
    " [FREE DOWNLOAD]"
    // F-777
  ];
  cleanPatterns.forEach((expr) => title = title.replace(expr, ""));
  return title;
}
var TrackProgress = () => {
  return AnimatedCircProg({
    className: "bar-music-circprog",
    vpack: "center",
    hpack: "center",
    extraSetup: (self) => self
  });
};
var music_default = () => {
  const playingState = Box2({
    // Wrap a box cuz overlay can't have margins itself
    homogeneous: true,
    children: [Overlay({
      child: Box2({
        vpack: "center",
        className: "bar-music-playstate",
        homogeneous: true,
        children: [Label({
          vpack: "center",
          className: "bar-music-playstate-txt",
          justification: "center",
          setup: (self) => self.hook(Mpris2, (label) => {
            const mpris = Mpris2.getPlayer("");
            label.label = `${mpris !== null && mpris.playBackStatus == "Playing" ? "pause" : "play_arrow"}`;
          })
        })],
        setup: (self) => self.hook(Mpris2, (label) => {
          const mpris = Mpris2.getPlayer("");
          if (!mpris) return;
          label.toggleClassName("bar-music-playstate-playing", mpris !== null && mpris.playBackStatus == "Playing");
          label.toggleClassName("bar-music-playstate", mpris !== null || mpris.playBackStatus == "Paused");
        })
      }),
      overlays: [
        TrackProgress()
      ]
    })]
  });
  const trackTitle = Label({
    hexpand: true,
    className: "txt-smallie bar-music-txt",
    truncate: "end",
    maxWidthChars: 10,
    // Doesn't matter, just needs to be non negative
    setup: (self) => self.hook(Mpris2, (label) => {
      const mpris = Mpris2.getPlayer("");
      if (mpris)
        label.label = `${trimTrackTitle(mpris.trackTitle)} \u2022 ${mpris.trackArtists.join(", ")}`;
      else
        label.label = "No media";
    })
  });
  const musicStuff = Box2({
    className: "music-bar",
    hexpand: true,
    vexpand: true,
    children: [
      playingState,
      trackTitle
    ]
  });
  return EventBox({
    child: musicStuff,
    onPrimaryClick: () => execAsync3("playerctl play-pause").catch(print),
    // onSecondaryClick: () => showMusicControls.setValue(!showMusicControls.value),
    onSecondaryClick: () => showMusicControls.setValue(!showMusicControls.value),
    // onHoverLost: () => showMusicControls.setValue(!showMusicControls.value),
    onMiddleClick: () => execAsync3(["bash", "-c", "playerctl next"]).catch(print)
    // setup: (self) => self.on('button-press-event', (self, event) => {
    //     if (event.get_button()[1] === 8) // Side button
    //         execAsync('playerctl previous').catch(print)
    // }),
  });
};

// modules/bar/normal/system.js
import Widget8 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils8 from "resource:///com/github/Aylur/ags/utils.js";
import Battery from "resource:///com/github/Aylur/ags/service/battery.js";
var { Box: Box3, Button: Button2 } = Widget8;
var { GLib: GLib2 } = imports.gi;
var batteryProgress = Widget8.CircularProgress({
  child: Widget8.Icon({
    css: `font-size: 13px;`,
    icon: Battery.bind("icon_name")
  }),
  visible: Battery.bind("available"),
  value: Battery.bind("percent").as((p) => p > 0 ? p / 100 : 0),
  class_name: "battery"
  // Battery.bind('charging').as(ch => ch ? 'battery' : ''),
});
var BarClock = () => Widget8.Box({
  vpack: "center",
  className: "clock-bar",
  children: [
    Widget8.Label({
      className: "bar-time",
      label: GLib2.DateTime.new_now_local().format(userOptions.time.format),
      setup: (self) => self.poll(userOptions.time.interval, (label) => {
        label.label = GLib2.DateTime.new_now_local().format(userOptions.time.format);
      })
    }),
    Widget8.Label({
      className: "txt-norm txt-onLayer1",
      css: `padding-left:3px;padding-right:3px;`,
      label: "\u2022"
    }),
    Widget8.Label({
      className: "txt-smallie bar-date",
      label: GLib2.DateTime.new_now_local().format(userOptions.time.dateFormatLong),
      setup: (self) => self.poll(userOptions.time.dateInterval, (label) => {
        label.label = GLib2.DateTime.new_now_local().format(userOptions.time.dateFormatLong);
      })
    })
  ]
});
var UtilButton = ({ name, icon, onClicked }) => Button2({
  vpack: "center",
  tooltipText: name,
  onClicked,
  className: "bar-util-btn icon-material txt-norm",
  label: `${icon}`
});
var Utilities = () => Box3({
  hpack: "center",
  className: "bar-group bar-group-standalone bar-group-pad-system",
  css: `margin:3px;padding-left:5px;padding-right:5px;`,
  children: [
    UtilButton({
      className: "spacing-h-4 bar-group-margin bar-sides",
      name: "Screen snip",
      icon: "screenshot_region",
      onClicked: () => {
        Utils8.execAsync(`${App.configDir}/scripts/grimblast.sh copy area`).catch(print);
      }
    }),
    UtilButton({
      className: "spacing-h-4 bar-group-margin bar-sides",
      name: "Color picker",
      icon: "colorize",
      onClicked: () => {
        Utils8.execAsync(["hyprpicker", "-a"]).catch(print);
      }
    }),
    UtilButton({
      className: "spacing-h-4 bar-group-margin bar-sides",
      name: "Toggle on-screen keyboard",
      icon: "keyboard",
      onClicked: () => {
        App.toggleWindow("osk");
      }
    })
  ]
});
var system_default = () => Widget8.Box({
  className: "spacing-h-4",
  children: [
    BarClock(),
    Utilities(),
    batteryProgress
  ]
});

// modules/bar/normal/workspaces_hyprland.js
import App4 from "resource:///com/github/Aylur/ags/app.js";
import * as Utils9 from "resource:///com/github/Aylur/ags/utils.js";
import Widget9 from "resource:///com/github/Aylur/ags/widget.js";
import Hyprland2 from "resource:///com/github/Aylur/ags/service/hyprland.js";
var { Gdk, Gtk: Gtk3 } = imports.gi;
var Lang2 = imports.lang;
var Cairo = imports.cairo;
var Pango = imports.gi.Pango;
var PangoCairo = imports.gi.PangoCairo;
var { Box: Box4, DrawingArea, EventBox: EventBox2 } = Widget9;
var dummyWs = Box4({ className: "bar-ws" });
var dummyActiveWs = Box4({ className: "bar-ws bar-ws-active" });
var dummyOccupiedWs = Box4({ className: "bar-ws bar-ws-occupied" });
var WorkspaceContents = (count = 10) => {
  return DrawingArea({
    css: `transition: 300ms cubic-bezier(0.1, 1, 0, 1);`,
    attribute: {
      initialized: false,
      workspaceMask: 0,
      workspaceGroup: 0,
      updateMask: (self) => {
        const offset = Math.floor((Hyprland2.active.workspace.id - 1) / count) * userOptions.workspaces.shown;
        const workspaces = Hyprland2.workspaces;
        let workspaceMask = 0;
        for (let i = 0; i < workspaces.length; i++) {
          const ws = workspaces[i];
          if (ws.id <= offset || ws.id > offset + count) continue;
          if (workspaces[i].windows > 0)
            workspaceMask |= 1 << ws.id - offset;
        }
        self.attribute.workspaceMask = workspaceMask;
        self.queue_draw();
      },
      toggleMask: (self, occupied, name) => {
        if (occupied) self.attribute.workspaceMask |= 1 << parseInt(name);
        else self.attribute.workspaceMask &= ~(1 << parseInt(name));
        self.queue_draw();
      }
    },
    setup: (area) => area.hook(Hyprland2.active.workspace, (self) => {
      self.setCss(`font-size: ${(Hyprland2.active.workspace.id - 1) % count + 1}px;`);
      const previousGroup = self.attribute.workspaceGroup;
      const currentGroup = Math.floor((Hyprland2.active.workspace.id - 1) / count);
      if (currentGroup !== previousGroup) {
        self.attribute.updateMask(self);
        self.attribute.workspaceGroup = currentGroup;
      }
    }).hook(Hyprland2, (self) => self.attribute.updateMask(self), "notify::workspaces").on("draw", Lang2.bind(area, (area2, cr) => {
      const offset = Math.floor((Hyprland2.active.workspace.id - 1) / count) * userOptions.workspaces.shown;
      const allocation = area2.get_allocation();
      const { width, height } = allocation;
      const workspaceStyleContext = dummyWs.get_style_context();
      const workspaceDiameter = workspaceStyleContext.get_property("min-width", Gtk3.StateFlags.NORMAL);
      const workspaceRadius = workspaceDiameter / 2;
      const workspaceFontSize = workspaceStyleContext.get_property("font-size", Gtk3.StateFlags.NORMAL) / 4 * 3;
      const workspaceFontFamily = workspaceStyleContext.get_property("font-family", Gtk3.StateFlags.NORMAL);
      const wsbg = workspaceStyleContext.get_property("background-color", Gtk3.StateFlags.NORMAL);
      const wsfg = workspaceStyleContext.get_property("color", Gtk3.StateFlags.NORMAL);
      const occupiedWorkspaceStyleContext = dummyOccupiedWs.get_style_context();
      const occupiedbg = occupiedWorkspaceStyleContext.get_property("background-color", Gtk3.StateFlags.NORMAL);
      const occupiedfg = occupiedWorkspaceStyleContext.get_property("color", Gtk3.StateFlags.NORMAL);
      const activeWorkspaceStyleContext = dummyActiveWs.get_style_context();
      const activebg = activeWorkspaceStyleContext.get_property("background-color", Gtk3.StateFlags.NORMAL);
      const activefg = activeWorkspaceStyleContext.get_property("color", Gtk3.StateFlags.NORMAL);
      area2.set_size_request(workspaceDiameter * count, -1);
      const widgetStyleContext = area2.get_style_context();
      const activeWs = widgetStyleContext.get_property("font-size", Gtk3.StateFlags.NORMAL);
      const activeWsCenterX = -(workspaceDiameter / 2) + workspaceDiameter * activeWs;
      const activeWsCenterY = height / 2;
      const layout = PangoCairo.create_layout(cr);
      const fontDesc = Pango.font_description_from_string(`${workspaceFontFamily[0]} ${workspaceFontSize}`);
      layout.set_font_description(fontDesc);
      cr.setAntialias(Cairo.Antialias.BEST);
      layout.set_text("0".repeat(count.toString().length), -1);
      const [layoutWidth, layoutHeight] = layout.get_pixel_size();
      const indicatorRadius = Math.max(layoutWidth, layoutHeight) / 2 * 1.2;
      const indicatorGap = workspaceRadius - indicatorRadius;
      for (let i = 1; i <= count; i++) {
        if (area2.attribute.workspaceMask & 1 << i) {
          cr.setSourceRGBA(occupiedbg.red, occupiedbg.green, occupiedbg.blue, occupiedbg.alpha);
          const wsCenterX = -workspaceRadius + workspaceDiameter * i;
          const wsCenterY = height / 2;
          if (!(area2.attribute.workspaceMask & 1 << i - 1)) {
            cr.arc(wsCenterX, wsCenterY, workspaceRadius, 0.5 * Math.PI, 1.5 * Math.PI);
            cr.fill();
          } else {
            cr.rectangle(wsCenterX - workspaceRadius, wsCenterY - workspaceRadius, workspaceRadius, workspaceRadius * 2);
            cr.fill();
          }
          if (!(area2.attribute.workspaceMask & 1 << i + 1)) {
            cr.arc(wsCenterX, wsCenterY, workspaceRadius, -0.5 * Math.PI, 0.5 * Math.PI);
            cr.fill();
          } else {
            cr.rectangle(wsCenterX, wsCenterY - workspaceRadius, workspaceRadius, workspaceRadius * 2);
            cr.fill();
          }
          cr.setSourceRGBA(occupiedfg.red, occupiedfg.green, occupiedfg.blue, occupiedfg.alpha);
        } else
          cr.setSourceRGBA(wsfg.red, wsfg.green, wsfg.blue, wsfg.alpha);
        layout.set_text(`${i + offset}`, -1);
        const [layoutWidth2, layoutHeight2] = layout.get_pixel_size();
        const x = -workspaceRadius + workspaceDiameter * i - layoutWidth2 / 2;
        const y = (height - layoutHeight2) / 2;
        cr.moveTo(x, y);
        PangoCairo.show_layout(cr, layout);
        cr.stroke();
      }
      cr.setSourceRGBA(activebg.red, activebg.green, activebg.blue, activebg.alpha);
      cr.arc(activeWsCenterX, activeWsCenterY, indicatorRadius, 0, 2 * Math.PI);
      cr.fill();
      cr.setSourceRGBA(activefg.red, activefg.green, activefg.blue, activefg.alpha);
      cr.arc(activeWsCenterX, activeWsCenterY, indicatorRadius * 0.2, 0, 2 * Math.PI);
      cr.fill();
    }))
  });
};
var workspaces_hyprland_default = () => EventBox2({
  onScrollUp: () => Hyprland2.messageAsync(`dispatch workspace -1`).catch(print),
  onScrollDown: () => Hyprland2.messageAsync(`dispatch workspace +1`).catch(print),
  // onMiddleClick: () => App.toggleWindow('osk'),
  // onSecondaryClick: () => App.toggleWindow('overview'),
  attribute: {
    clicked: false,
    ws_group: 0
  },
  child: Box4({
    homogeneous: true,
    className: "bar-group-margin",
    children: [Box4({
      className: "bar-group bar-group-standalone bar-group-pad",
      css: "min-width: 2px;",
      children: [WorkspaceContents()]
    })]
  }),
  setup: (self) => {
    self.add_events(Gdk.EventMask.POINTER_MOTION_MASK);
    self.on("motion-notify-event", (self2, event) => {
      if (!self2.attribute.clicked) return;
      const [_, cursorX, cursorY] = event.get_coords();
      const widgetWidth = self2.get_allocation().width;
      const wsId = Math.ceil(cursorX * userOptions.workspaces.shown / widgetWidth);
      Utils9.execAsync([`${App4.configDir}/scripts/hyprland/workspace_action.sh`, "workspace", `${wsId}`]).catch(print);
    });
    self.on("button-release-event", (self2) => self2.attribute.clicked = false);
  }
});

// modules/bar/main.js
var Bar = async (monitor = 0) => {
  const normalBarContent = Widget10.CenterBox({
    hexpand: false,
    className: "bar-bg",
    css: `border-radius:10px;min-width:${SCREEN_WIDTH - 5}px`,
    startWidget: spaceleft_default(),
    centerWidget: Widget10.Box({
      className: "spacing-h-4",
      css: `background:transparent;`,
      children: [
        music_default(),
        workspaces_hyprland_default(),
        // Widget.Box({
        //     homogeneous: true,
        //     children: [await NormalOptionalWorkspaces()],
        // }),
        system_default()
      ]
    }),
    endWidget: spaceright_default()
  });
  return Widget10.Window({
    monitor,
    name: `bar${monitor}`,
    anchor: ["top"],
    exclusivity: "exclusive",
    visible: true,
    child: normalBarContent
  });
};

// modules/indicators/main.js
import Widget18 from "resource:///com/github/Aylur/ags/widget.js";

// modules/indicators/indicatorvalues.js
import Widget12 from "resource:///com/github/Aylur/ags/widget.js";
import Audio2 from "resource:///com/github/Aylur/ags/service/audio.js";

// modules/.widgethacks/advancedrevealers.js
import Widget11 from "resource:///com/github/Aylur/ags/widget.js";
var { Revealer, Scrollable } = Widget11;
var MarginRevealer = ({
  transition = "slide_down",
  child,
  revealChild,
  showClass = "element-show",
  // These are for animation curve, they don't really hide
  hideClass = "element-hide",
  // Don't put margins in these classes!
  extraSetup = () => {
  },
  ...rest
}) => {
  const widget = Scrollable({
    ...rest,
    attribute: {
      "revealChild": true,
      // It'll be set to false after init if it's supposed to hide
      "transition": transition,
      "show": () => {
        if (widget.attribute.revealChild) return;
        widget.hscroll = "never";
        widget.vscroll = "never";
        child.toggleClassName(hideClass, false);
        child.toggleClassName(showClass, true);
        widget.attribute.revealChild = true;
        child.css = "margin: 0px;";
      },
      "hide": () => {
        if (!widget.attribute.revealChild) return;
        child.toggleClassName(hideClass, true);
        child.toggleClassName(showClass, false);
        widget.attribute.revealChild = false;
        if (widget.attribute.transition == "slide_left")
          child.css = `margin-right: -${child.get_allocated_width()}px;`;
        else if (widget.attribute.transition == "slide_right")
          child.css = `margin-left: -${child.get_allocated_width()}px;`;
        else if (widget.attribute.transition == "slide_up")
          child.css = `margin-bottom: -${child.get_allocated_height()}px;`;
        else if (widget.attribute.transition == "slide_down")
          child.css = `margin-top: -${child.get_allocated_height()}px;`;
      },
      "toggle": () => {
        if (widget.attribute.revealChild) widget.attribute.hide();
        else widget.attribute.show();
      }
    },
    child,
    hscroll: `${revealChild ? "never" : "always"}`,
    vscroll: `${revealChild ? "never" : "always"}`,
    setup: (self) => {
      extraSetup(self);
    }
  });
  child.toggleClassName(`${revealChild ? showClass : hideClass}`, true);
  return widget;
};

// services/brightness.js
var BrightnessService = class extends Service {
  static {
    Service.register(
      this,
      {
        // 'name-of-signal': [type as a string from GObject.TYPE_<type>],
        "screen-changed": ["float"]
      },
      {
        // 'kebab-cased-name': [type as a string from GObject.TYPE_<type>, 'r' | 'w' | 'rw']
        // 'r' means readable
        // 'w' means writable
        // guess what 'rw' means
        "screen-value": ["float", "rw"]
      }
    );
  }
  // this Service assumes only one device with backlight
  #interface = Utils.exec("bash -c 'ls -w1 /sys/class/backlight | head -1'");
  // # prefix means private in JS
  #screenValue = 0;
  #max = Number(Utils.exec("brightnessctl max"));
  // the getter has to be in snake_case
  get screen_value() {
    return this.#screenValue;
  }
  // the setter has to be in snake_case too
  set screen_value(percent) {
    if (percent < 0)
      percent = 0;
    if (percent > 1)
      percent = 1;
    Utils.execAsync(`brightnessctl set ${percent * 100}% -q`);
  }
  constructor() {
    super();
    const brightness = `/sys/class/backlight/${this.#interface}/brightness`;
    Utils.monitorFile(brightness, () => this.#onChange());
    this.#onChange();
  }
  #onChange() {
    this.#screenValue = Number(Utils.exec("brightnessctl get")) / this.#max;
    this.emit("changed");
    this.notify("screen-value");
    this.emit("screen-changed", this.#screenValue);
  }
  // overwriting the connect method, let's you
  // change the default event that widgets connect to
  connect(event = "screen-changed", callback) {
    return super.connect(event, callback);
  }
};
var service2 = new BrightnessService();
var brightness_default = service2;

// modules/indicators/indicatorvalues.js
var { Box: Box5, Label: Label2, ProgressBar } = Widget12;
var OsdValue = ({
  name,
  nameSetup = void 0,
  labelSetup,
  progressSetup,
  extraClassName = "",
  extraProgressClassName = "",
  ...rest
}) => {
  const valueName = Label2({
    xalign: 0,
    yalign: 0,
    hexpand: true,
    className: "osd-label",
    label: `${name}`,
    setup: nameSetup
  });
  const valueNumber = Label2({
    hexpand: false,
    className: "osd-value-txt",
    setup: labelSetup
  });
  return Box5({
    // Volume
    vertical: true,
    hexpand: true,
    css: `min-height:5px;`,
    className: `osd-bg osd-value ${extraClassName}`,
    attribute: {
      "disable": () => {
        valueNumber.label = "\u{F05AD}";
      }
    },
    children: [
      Box5({
        vexpand: true,
        children: [
          valueName,
          valueNumber
        ]
      }),
      ProgressBar({
        className: `osd-progress ${extraProgressClassName}`,
        hexpand: true,
        vertical: false,
        setup: progressSetup
      })
    ],
    ...rest
  });
};
var indicatorvalues_default = () => {
  const brightnessIndicator = OsdValue({
    name: "Brightness",
    extraClassName: "osd-brightness",
    extraProgressClassName: "osd-brightness-progress",
    labelSetup: (self) => self.hook(brightness_default, (self2) => {
      self2.label = `${Math.round(brightness_default.screen_value * 100)}`;
    }, "notify::screen-value"),
    progressSetup: (self) => self.hook(brightness_default, (progress) => {
      const updateValue = brightness_default.screen_value;
      progress.value = updateValue;
    }, "notify::screen-value")
  });
  const volumeIndicator = OsdValue({
    name: "Volume",
    extraClassName: "osd-volume",
    extraProgressClassName: "osd-volume-progress",
    attribute: { headphones: void 0 },
    nameSetup: (self) => Utils.timeout(1, () => {
      const updateAudioDevice = (self2) => {
        const usingHeadphones = Audio2.speaker?.stream?.port?.toLowerCase().includes("headphone");
        if (volumeIndicator.attribute.headphones === void 0 || volumeIndicator.attribute.headphones !== usingHeadphones) {
          volumeIndicator.attribute.headphones = usingHeadphones;
          self2.label = usingHeadphones ? "Headphones" : "Speakers";
          indicator_default.popup(1);
        }
      };
      self.hook(Audio2, updateAudioDevice);
      Utils.timeout(1e3, updateAudioDevice);
    }),
    labelSetup: (self) => self.hook(Audio2, (label) => {
      label.label = `${Math.round(Audio2.speaker?.volume * 100)}`;
    }),
    progressSetup: (self) => self.hook(Audio2, (progress) => {
      const updateValue = Audio2.speaker?.volume;
      if (!isNaN(updateValue)) progress.value = updateValue;
    })
  });
  return MarginRevealer({
    // transition: 'slide_down',
    // showClass: 'osd-show',
    // hideClass: 'osd-hide',
    extraSetup: (self) => self.hook(indicator_default, (revealer, value) => {
      if (value > -1) revealer.attribute.show();
      else revealer.attribute.hide();
    }, "popup"),
    child: Box5({
      hpack: "center",
      vertical: false,
      // className: 'spacing-h--10',
      children: [
        brightnessIndicator,
        volumeIndicator
      ]
    })
  });
};

// modules/indicators/musiccontrols.js
import App5 from "resource:///com/github/Aylur/ags/app.js";
import Widget13 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils11 from "resource:///com/github/Aylur/ags/utils.js";
import Mpris3 from "resource:///com/github/Aylur/ags/service/mpris.js";

// modules/.miscutils/files.js
var { Gio, GLib: GLib3, Gtk: Gtk4 } = imports.gi;
function fileExists(filePath) {
  let file = Gio.File.new_for_path(filePath);
  return file.query_exists(null);
}

// modules/.miscutils/system.js
import * as Utils10 from "resource:///com/github/Aylur/ags/utils.js";
var { GLib: GLib4 } = imports.gi;
var { execAsync: execAsync6, exec: exec4 } = Utils10;
var distroID = exec4(`bash -c 'cat /etc/os-release | grep "^ID=" | cut -d "=" -f 2 | sed "s/\\"//g"'`).trim();
var isDebianDistro = distroID == "linuxmint" || distroID == "ubuntu" || distroID == "debian" || distroID == "zorin" || distroID == "popos" || distroID == "raspbian" || distroID == "kali";
var isArchDistro = distroID == "arch" || distroID == "endeavouros" || distroID == "cachyos";
var hasFlatpak = !!exec4(`bash -c 'command -v flatpak'`);
var LIGHTDARK_FILE_LOCATION = `${GLib4.get_user_cache_dir()}/ags/user/colormode.txt`;
var colorMode = Utils10.exec(`bash -c "sed -n '1p' $HOME/.cache/ags/user/colormode.txt"`);
var darkMode = !(Utils10.readFile(LIGHTDARK_FILE_LOCATION).split("\n")[0].trim() == "light");
var hasPlasmaIntegration = !!Utils10.exec('bash -c "command -v plasma-browser-integration-host"');

// modules/indicators/musiccontrols.js
var { GLib: GLib5 } = imports.gi;
var { exec: exec5, execAsync: execAsync7 } = Utils11;
var { Box: Box6, Label: Label3, Button: Button3, Revealer: Revealer2 } = Widget13;
var COMPILED_STYLE_DIR = `${GLib5.get_user_cache_dir()}/ags/user/generated`;
var COVER_COLORSCHEME_SUFFIX = "_colorscheme.css";
var lastCoverPath = "";
function lengthStr(length) {
  const min = Math.floor(length / 60);
  const sec = Math.floor(length % 60);
  const sec0 = sec < 10 ? "0" : "";
  return `${min}:${sec0}${sec}`;
}
var DEFAULT_MUSIC_FONT = "Gabarito, sans-serif";
function getTrackfont(player) {
  const title = player.trackTitle;
  const artists = player.trackArtists.join(" ");
  if (artists.includes("TANO*C") || artists.includes("USAO") || artists.includes("Kobaryo"))
    return "Chakra Petch";
  if (title.includes("\u6771\u65B9"))
    return "Crimson Text, serif";
  return DEFAULT_MUSIC_FONT;
}
function trimTrackTitle2(title) {
  if (!title) return "";
  const cleanPatterns = [
    /【[^】]*】/,
    // Touhou n weeb stuff
    " [FREE DOWNLOAD]"
    // F-777
  ];
  cleanPatterns.forEach((expr) => title = title.replace(expr, ""));
  return title;
}
var TrackTitle = ({ player, ...rest }) => Label3({
  ...rest,
  label: "No music playing",
  xalign: 0,
  truncate: "end",
  // wrap: true,
  className: "osd-music-title",
  setup: (self) => self.hook(player, (self2) => {
    self2.label = player.trackTitle.length > 0 ? trimTrackTitle2(player.trackTitle) : "No media";
    const fontForThisTrack = getTrackfont(player);
    self2.css = `font-family: ${fontForThisTrack}, ${DEFAULT_MUSIC_FONT};`;
  }, "notify::track-title")
});
var TrackArtists = ({ player, ...rest }) => Label3({
  ...rest,
  xalign: 0,
  className: "osd-music-artists",
  truncate: "end",
  setup: (self) => self.hook(player, (self2) => {
    self2.label = player.trackArtists.length > 0 ? player.trackArtists.join(", ") : "";
  }, "notify::track-artists")
});
var CoverArt = ({ player, ...rest }) => {
  const fallbackCoverArt = Box6({
    // Fallback
    className: "osd-music-cover-fallback",
    homogeneous: true,
    children: [Label3({
      className: "icon-material txt-gigantic txt-thin",
      label: "music_note"
    })]
  });
  const realCoverArt = Box6({
    className: "osd-music-cover-art",
    homogeneous: true,
    // children: [coverArtDrawingArea],
    attribute: {
      "pixbuf": null,
      // 'showImage': (self, imagePath) => {
      //     const borderRadius = coverArtDrawingAreaStyleContext.get_property('border-radius', Gtk.StateFlags.NORMAL);
      //     const frameHeight = coverArtDrawingAreaStyleContext.get_property('min-height', Gtk.StateFlags.NORMAL);
      //     const frameWidth = coverArtDrawingAreaStyleContext.get_property('min-width', Gtk.StateFlags.NORMAL);
      //     let imageHeight = frameHeight;
      //     let imageWidth = frameWidth;
      //     // Get image dimensions
      //     execAsync(['identify', '-format', '{"w":%w,"h":%h}', imagePath])
      //         .then((output) => {
      //             const imageDimensions = JSON.parse(output);
      //             const imageAspectRatio = imageDimensions.w / imageDimensions.h;
      //             const displayedAspectRatio = imageWidth / imageHeight;
      //             if (imageAspectRatio >= displayedAspectRatio) {
      //                 imageWidth = imageHeight * imageAspectRatio;
      //             } else {
      //                 imageHeight = imageWidth / imageAspectRatio;
      //             }
      //             // Real stuff
      //             // TODO: fix memory leak(?)
      //             // if (self.attribute.pixbuf) {
      //             //     self.attribute.pixbuf.unref();
      //             //     self.attribute.pixbuf = null;
      //             // }
      //             self.attribute.pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(imagePath, imageWidth, imageHeight);
      //             coverArtDrawingArea.set_size_request(frameWidth, frameHeight);
      //             coverArtDrawingArea.connect("draw", (widget, cr) => {
      //                 // Clip a rounded rectangle area
      //                 cr.arc(borderRadius, borderRadius, borderRadius, Math.PI, 1.5 * Math.PI);
      //                 cr.arc(frameWidth - borderRadius, borderRadius, borderRadius, 1.5 * Math.PI, 2 * Math.PI);
      //                 cr.arc(frameWidth - borderRadius, frameHeight - borderRadius, borderRadius, 0, 0.5 * Math.PI);
      //                 cr.arc(borderRadius, frameHeight - borderRadius, borderRadius, 0.5 * Math.PI, Math.PI);
      //                 cr.closePath();
      //                 cr.clip();
      //                 // Paint image as bg, centered
      //                 Gdk.cairo_set_source_pixbuf(cr, self.attribute.pixbuf,
      //                     frameWidth / 2 - imageWidth / 2,
      //                     frameHeight / 2 - imageHeight / 2
      //                 );
      //                 cr.paint();
      //             });
      //         }).catch(print)
      // },
      "updateCover": (self) => {
        const coverPath = player.coverPath;
        if (!player || player.trackTitle == "" || !coverPath) {
          self.css = `background-image: none;`;
          App5.applyCss(`${COMPILED_STYLE_DIR}/style.css`);
          return;
        }
        const stylePath = `${player.coverPath}${darkMode.value ? "" : "-l"}${COVER_COLORSCHEME_SUFFIX}`;
        if (player.coverPath == lastCoverPath) {
          Utils11.timeout(200, () => {
            self.css = `background-image: url('${coverPath}');`;
          });
        }
        lastCoverPath = player.coverPath;
        if (fileExists(stylePath)) {
          self.css = `background-image: url('${coverPath}');`;
          App5.applyCss(stylePath);
          return;
        }
        execAsync7([
          "bash",
          "-c",
          `${App5.configDir}/scripts/color_generation/generate_colors_material.py --path '${coverPath}' --mode ${darkMode.value ? "dark" : "light"} > ${App5.configDir}/scss/_musicmaterial.scss`
        ]).then(() => {
          exec5(`wal -i "${player.coverPath}" -n -t -s -e -q ${darkMode.value ? "" : "-l"}`);
          exec5(`cp ${GLib5.get_user_cache_dir()}/wal/colors.scss ${App5.configDir}/scss/_musicwal.scss`);
          exec5(`sass ${App5.configDir}/scss/_music.scss ${stylePath}`);
          Utils11.timeout(200, () => {
            self.css = `background-image: url('${coverPath}');`;
          });
          App5.applyCss(`${stylePath}`);
        }).catch(print);
      }
    },
    setup: (self) => self.hook(player, (self2) => {
      self2.attribute.updateCover(self2);
    }, "notify::cover-path")
  });
  return Box6({
    ...rest,
    className: "osd-music-cover",
    children: [
      Widget13.Overlay({
        child: fallbackCoverArt,
        overlays: [realCoverArt]
      })
    ]
  });
};
var TrackControls = ({ player, ...rest }) => Widget13.Revealer({
  revealChild: true,
  // transition: 'slide_right',
  // transitionDuration: userOptions.animations.durationLarge,
  child: Widget13.Box({
    ...rest,
    vpack: "center",
    className: "osd-music-controls spacing-h-3",
    children: [
      Button3({
        className: "osd-music-controlbtn",
        onClicked: () => player.previous(),
        child: Label3({
          className: "icon-material osd-music-controlbtn-txt",
          label: "skip_previous"
        })
      }),
      Button3({
        className: "osd-music-controlbtn",
        onClicked: () => player.next(),
        child: Label3({
          className: "icon-material osd-music-controlbtn-txt",
          label: "skip_next"
        })
      })
    ]
  })
  // setup: (self) => self.hook(Mpris, (self) => {
  //     // const player = Mpris.getPlayer();
  //     if (!player)
  //         self.revealChild = false;
  //     else
  //         self.revealChild = true;
  // }, 'notify::play-back-status'),
});
var TrackTime = ({ player, ...rest }) => {
  return Widget13.Revealer({
    revealChild: true,
    // transition: 'slide_left',
    // transitionDuration: userOptions.animations.durationLarge,
    child: Widget13.Box({
      ...rest,
      vpack: "center",
      className: "osd-music-pill spacing-h-5",
      children: [
        Label3({
          setup: (self) => self.hook(player, (self2) => {
            self2.label = lengthStr(player.position);
            if (!player && player.playBackStatus != "Playing") return;
            function update() {
              if (player.playBackStatus != "Playing") return;
              self2.label = lengthStr(player.position);
            }
            self2.hook(player, update);
            self2.hook(player, update, "position");
            self2.poll(1e3, update);
          })
        }),
        Label3({ label: "/" }),
        Label3({
          setup: (self) => self.hook(Mpris3, (self2) => {
            if (!player) return;
            self2.label = lengthStr(player.length);
          })
        })
      ]
    })
  });
};
var PlayState = ({ player }) => {
  var position = 0;
  return Widget13.Button({
    className: "osd-music-playstate-btn osd-music-playstate",
    css: `border: 2px solid black;`,
    onClicked: () => player.playPause(),
    child: Widget13.Label({
      justification: "center",
      hpack: "fill",
      vpack: "center",
      setup: (self) => self.hook(player, (label) => {
        label.label = `${player.playBackStatus == "Playing" ? "pause" : "play_arrow"}`;
      }, "notify::play-back-status")
    })
  });
};
var MusicControlsWidget = (player) => Box6({
  className: "osd-music spacing-h-20 test",
  children: [
    CoverArt({ player, vpack: "center" }),
    Box6({
      vertical: true,
      className: "spacing-v-5 osd-music-info",
      children: [
        Box6({
          vertical: true,
          vpack: "center",
          hexpand: true,
          children: [
            TrackTitle({ player }),
            TrackArtists({ player })
          ]
        }),
        Box6({ vexpand: true }),
        Box6({
          className: "spacing-h-10",
          setup: (box) => {
            box.pack_start(TrackControls({ player }), false, false, 0);
            box.pack_end(PlayState({ player }), false, false, 0);
            box.pack_end(TrackTime({ player }), false, false, 0);
          }
        })
      ]
    })
  ]
});
var musiccontrols_default = () => Revealer2({
  // transition: 'slide_down',
  // transitionDuration: userOptions.animations.durationLarge,
  // revealChild: false,
  child: Box6({
    children: Mpris3.bind("players").as((players) => players.map((player) => MusicControlsWidget(player)))
  }),
  setup: (self) => self.hook(showMusicControls, (revealer) => {
    revealer.revealChild = showMusicControls.value;
  })
});

// modules/indicators/colorscheme.js
import Variable2 from "resource:///com/github/Aylur/ags/variable.js";
import Widget15 from "resource:///com/github/Aylur/ags/widget.js";

// modules/.commonwidgets/configwidgets.js
import Widget14 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils12 from "resource:///com/github/Aylur/ags/utils.js";

// modules/.widgetutils/cursorhover.js
var { Gdk: Gdk2 } = imports.gi;
function setupCursorHover(button) {
  const display = Gdk2.Display.get_default();
  button.connect("enter-notify-event", () => {
    const cursor = Gdk2.Cursor.new_from_name(display, "pointer");
    button.get_window().set_cursor(cursor);
  });
  button.connect("leave-notify-event", () => {
    const cursor = Gdk2.Cursor.new_from_name(display, "default");
    button.get_window().set_cursor(cursor);
  });
}
function setupCursorHoverInfo(button) {
  const display = Gdk2.Display.get_default();
  button.connect("enter-notify-event", () => {
    const cursor = Gdk2.Cursor.new_from_name(display, "help");
    button.get_window().set_cursor(cursor);
  });
  button.connect("leave-notify-event", () => {
    const cursor = Gdk2.Cursor.new_from_name(display, "default");
    button.get_window().set_cursor(cursor);
  });
}

// modules/.commonwidgets/configwidgets.js
var { Box: Box7, Button: Button4, Label: Label4, Revealer: Revealer3 } = Widget14;
var ConfigToggle = ({ icon, name, desc = "", initValue, onChange, ...rest }) => {
  let value = initValue;
  const toggleIcon = Label4({
    className: `icon-material txt-bold ${value ? "" : "txt-poof"}`,
    label: `${value ? "check" : ""}`
  });
  const toggleButtonIndicator = Box7({
    className: `switch-fg ${value ? "switch-fg-true" : ""}`,
    vpack: "center",
    hpack: "start",
    homogeneous: true,
    children: [toggleIcon]
  });
  const toggleButton = Box7({
    hpack: "end",
    className: `switch-bg ${value ? "switch-bg-true" : ""}`,
    homogeneous: true,
    children: [toggleButtonIndicator]
  });
  const widgetContent2 = Box7({
    tooltipText: desc,
    className: "txt spacing-h-5 configtoggle-box",
    children: [
      MaterialIcon(icon, "norm"),
      Label4({
        className: "txt txt-small",
        label: name
      }),
      Box7({ hexpand: true }),
      toggleButton
    ]
  });
  const interactionWrapper = Button4({
    attribute: {
      toggle: (newValue) => {
        value = !value;
        toggleIcon.toggleClassName("switch-fg-toggling-false", false);
        if (!value) {
          toggleIcon.label = "";
          toggleIcon.toggleClassName("txt-poof", true);
        }
        toggleButtonIndicator.toggleClassName("switch-fg-true", value);
        toggleButton.toggleClassName("switch-bg-true", value);
        if (value) Utils12.timeout(1, () => {
          toggleIcon.label = "check";
          toggleIcon.toggleClassName("txt-poof", false);
        });
        onChange(interactionWrapper, value);
      }
    },
    child: widgetContent2,
    onClicked: (self) => self.attribute.toggle(self),
    setup: (button) => {
      setupCursorHover(button), button.connect("pressed", () => {
        toggleIcon.toggleClassName("txt-poof", true);
        toggleIcon.toggleClassName("switch-fg-true", false);
        if (!value) toggleIcon.toggleClassName("switch-fg-toggling-false", true);
      });
    },
    ...rest
  });
  return interactionWrapper;
};
var ConfigSegmentedSelection = ({
  icon,
  name,
  desc = "",
  options = [{ name: "Option 1", value: 0 }, { name: "Option 2", value: 1 }],
  initIndex = 0,
  onChange,
  ...rest
}) => {
  let lastSelected = initIndex;
  let value = options[initIndex].value;
  const widget = Box7({
    tooltipText: desc,
    className: "segment-container",
    // homogeneous: true,
    children: options.map((option, id) => {
      const selectedIcon = Revealer3({
        revealChild: id == initIndex,
        transition: "slide_right",
        transitionDuration: userOptions.animations.durationSmall,
        child: MaterialIcon("check", "norm")
      });
      return Button4({
        setup: setupCursorHover,
        className: `segment-btn ${id == initIndex ? "segment-btn-enabled" : ""}`,
        child: Box7({
          hpack: "center",
          className: "spacing-h-5",
          children: [
            selectedIcon,
            Label4({
              label: option.name
            })
          ]
        }),
        onClicked: (self) => {
          value = option.value;
          const kids = widget.get_children();
          kids[lastSelected].toggleClassName("segment-btn-enabled", false);
          kids[lastSelected].get_children()[0].get_children()[0].revealChild = false;
          lastSelected = id;
          self.toggleClassName("segment-btn-enabled", true);
          selectedIcon.revealChild = true;
          onChange(option.value, option.name);
        }
      });
    }),
    ...rest
  });
  return widget;
};
var ConfigMulipleSelection = ({
  icon,
  name,
  desc = "",
  optionsArr = [
    [{ name: "Option 1", value: 0 }, { name: "Option 2", value: 1 }],
    [{ name: "Option 3", value: 0 }, { name: "Option 4", value: 1 }]
  ],
  initIndex = [0, 0],
  onChange,
  ...rest
}) => {
  let lastSelected = initIndex;
  const widget = Box7({
    tooltipText: desc,
    className: "multipleselection-container spacing-v-3",
    vertical: true,
    children: optionsArr.map((options, grp) => {
      return Box7({
        className: "spacing-h-5",
        hpack: "center",
        children: options.map((option, id) => {
          return Button4({
            setup: setupCursorHover,
            className: `multipleselection-btn ${id == initIndex[1] && grp == initIndex[0] ? "multipleselection-btn-enabled" : ""}`,
            label: option.name,
            onClicked: (self) => {
              const kidsg = widget.get_children();
              const kids = kidsg.flatMap((widget2) => widget2.get_children());
              kids.forEach((kid) => {
                kid.toggleClassName("multipleselection-btn-enabled", false);
              });
              lastSelected = id;
              self.toggleClassName("multipleselection-btn-enabled", true);
              onChange(option.value, option.name);
            }
          });
        })
      });
    }),
    ...rest
  });
  return widget;
};
var ConfigGap = ({ vertical = true, size = 5, ...rest }) => Box7({
  className: `gap-${vertical ? "v" : "h"}-${size}`,
  ...rest
});

// modules/indicators/colorscheme.js
import * as Utils13 from "resource:///com/github/Aylur/ags/utils.js";
var { GLib: GLib6 } = imports.gi;
var { execAsync: execAsync8 } = Utils13;
var ColorBox = ({
  name = "Color",
  ...rest
}) => Widget15.Box({
  ...rest,
  homogeneous: true,
  children: [
    Widget15.Label({
      label: `${name}`
    })
  ]
});
var ColorSchemeSettingsRevealer = () => {
  const headerButtonIcon = MaterialIcon("expand_more", "norm");
  const header = Widget15.Button({
    className: "osd-settings-btn-arrow",
    onClicked: () => {
      content.revealChild = !content.revealChild;
      headerButtonIcon.label = content.revealChild ? "expand_less" : "expand_more";
    },
    setup: setupCursorHover,
    hpack: "end",
    child: headerButtonIcon
  });
  const content = Widget15.Revealer({
    revealChild: false,
    // transition: 'slide_down',
    // transitionDuration: 200,
    child: ColorSchemeSettings(),
    setup: (self) => self.hook(isHoveredColorschemeSettings, (revealer) => {
      if (isHoveredColorschemeSettings.value == false) {
        setTimeout(() => {
          if (isHoveredColorschemeSettings.value == false)
            revealer.revealChild = false;
          headerButtonIcon.label = "expand_more";
        }, 1500);
      }
    })
  });
  return Widget15.EventBox({
    onHover: (self) => {
      isHoveredColorschemeSettings.setValue(true);
    },
    onHoverLost: (self) => {
      isHoveredColorschemeSettings.setValue(false);
    },
    child: Widget15.Box({
      vertical: true,
      children: [
        header,
        content
      ]
    })
  });
};
function calculateSchemeInitIndex(optionsArr, searchValue = "vibrant") {
  if (searchValue == "")
    searchValue = "vibrant";
  const flatArray = optionsArr.flatMap((subArray) => subArray);
  const result = flatArray.findIndex((element) => element.value === searchValue);
  const rowIndex = Math.floor(result / optionsArr[0].length);
  const columnIndex = result % optionsArr[0].length;
  return [rowIndex, columnIndex];
}
var schemeOptionsArr = [
  [
    { name: "Tonal Spot", value: "tonalspot" },
    { name: "Fruit Salad", value: "fruitsalad" },
    { name: "Fidelity", value: "fidelity" },
    { name: "Rainbow", value: "rainbow" }
  ],
  [
    { name: "Neutral", value: "neutral" },
    { name: "Monochrome", value: "monochrome" },
    { name: "Expressive", value: "expressive" },
    { name: "Vibrant", value: "vibrant" }
  ]
  //[
  //  { name: 'Content', value: 'content' },
  //]
];
var initColorMode = Utils13.exec(`bash -c "sed -n '1p' $HOME/.cache/ags/user/colormode.txt"`);
var initColorVal = initColorMode == "dark" ? 1 : 0;
var initTransparency = Utils13.exec(`bash -c "sed -n '2p' $HOME/.cache/ags/user/colormode.txt"`);
var initTransparencyVal = initTransparency == "transparent" ? 1 : 0;
var initScheme = Utils13.exec(`bash -c "sed -n '3p' $HOME/.cache/ags/user/colormode.txt"`);
var initSchemeIndex = calculateSchemeInitIndex(schemeOptionsArr, initScheme);
var ColorSchemeSettings = () => Widget15.Box({
  className: "osd-colorscheme-settings spacing-v-5",
  vertical: true,
  vpack: "center",
  children: [
    Widget15.Box({
      children: [
        ConfigToggle({
          name: "Dark Mode",
          initValue: initColorVal,
          onChange: (self, newValue) => {
            if (fileExists(`${GLib6.get_user_cache_dir()}/swww/eDP-1`)) {
              var contents = Utils13.readFile(`${GLib6.get_user_cache_dir()}/swww/eDP-1`).trim();
              let lightdark = newValue == 0 ? "light" : "dark";
              execAsync8([`bash`, `-c`, `${App.configDir}/scripts/color_generation/generate_colors_material.py --path ${contents} --mode ${lightdark} --apply --ags`]).catch(print);
            } else {
              execAsync8([`bash`, `-c`, `notify-send "no wallpaper found!!!"`]).catch(print);
            }
          }
        }),
        ConfigToggle({
          name: "Transparency",
          initValue: initTransparencyVal,
          onChange: (self, newValue) => {
            let transparency = newValue == 0 ? "opaque" : "transparent";
            if (fileExists(`${GLib6.get_user_cache_dir()}/swww/eDP-1`)) {
              var contents = Utils13.readFile(`${GLib6.get_user_cache_dir()}/swww/eDP-1`).trim();
              execAsync8([`bash`, `-c`, `${App.configDir}/scripts/color_generation/generate_colors_material.py --path ${contents} --mode ${initColorMode} --transparency ${transparency} --apply --ags`]).catch(print);
            } else {
              execAsync8([`bash`, `-c`, `notify-send "no wallpaper found!!!"`]).catch(print);
            }
          }
        })
      ]
    }),
    ConfigMulipleSelection({
      hpack: "center",
      vpack: "center",
      optionsArr: schemeOptionsArr,
      initIndex: initSchemeIndex,
      onChange: (value, name) => {
        if (fileExists(`${GLib6.get_user_cache_dir()}/swww/eDP-1`)) {
          var contents = Utils13.readFile(`${GLib6.get_user_cache_dir()}/swww/eDP-1`).trim();
          execAsync8([`bash`, `-c`, `${App.configDir}/scripts/color_generation/generate_colors_material.py --path ${contents} --mode ${initColorMode} --transparency ${initTransparency} --scheme ${value} --apply --ags`]).catch(print);
        } else {
          execAsync8([`bash`, `-c`, `notify-send "no wallpaper found!!!"`]).catch(print);
        }
      }
    })
  ]
});
var ColorschemeContent = () => Widget15.Box({
  className: "osd-colorscheme spacing-v-5",
  vertical: true,
  hpack: "center",
  children: [
    Widget15.Label({
      xalign: 0,
      className: "txt-norm titlefont txt",
      label: "Colorscheme",
      hpack: "center"
    }),
    Widget15.Box({
      className: "spacing-h-5",
      hpack: "center",
      children: [
        ColorBox({ name: "P", className: "osd-color osd-color-primary" }),
        ColorBox({ name: "S", className: "osd-color osd-color-secondary" }),
        ColorBox({ name: "T", className: "osd-color osd-color-tertiary" }),
        ColorBox({ name: "Sf", className: "osd-color osd-color-surface" }),
        ColorBox({ name: "Sf-i", className: "osd-color osd-color-inverseSurface" }),
        ColorBox({ name: "E", className: "osd-color osd-color-error" })
      ]
    }),
    Widget15.Box({
      className: "spacing-h-5",
      hpack: "center",
      children: [
        ColorBox({ name: "P-c", className: "osd-color osd-color-primaryContainer" }),
        ColorBox({ name: "S-c", className: "osd-color osd-color-secondaryContainer" }),
        ColorBox({ name: "T-c", className: "osd-color osd-color-tertiaryContainer" }),
        ColorBox({ name: "Sf-c", className: "osd-color osd-color-surfaceContainer" }),
        ColorBox({ name: "Sf-v", className: "osd-color osd-color-surfaceVariant" }),
        ColorBox({ name: "E-c", className: "osd-color osd-color-errorContainer" })
      ]
    }),
    ColorSchemeSettingsRevealer()
  ]
});
var isHoveredColorschemeSettings = Variable2(false);
var colorscheme_default = () => Widget15.Revealer({
  // transition: 'slide_down',
  // transitionDuration: userOptions.animations.durationLarge,
  child: ColorschemeContent(),
  setup: (self) => {
    self.hook(showColorScheme, (revealer) => {
      if (showColorScheme.value == true)
        revealer.revealChild = true;
      else
        revealer.revealChild = isHoveredColorschemeSettings.value;
    }).hook(isHoveredColorschemeSettings, (revealer) => {
      if (isHoveredColorschemeSettings.value == false) {
        setTimeout(() => {
          if (isHoveredColorschemeSettings.value == false)
            revealer.revealChild = showColorScheme.value;
        }, 2e3);
      }
    });
  }
});

// modules/indicators/notificationpopups.js
import Widget17 from "resource:///com/github/Aylur/ags/widget.js";
import Notifications2 from "resource:///com/github/Aylur/ags/service/notifications.js";

// modules/.commonwidgets/notification.js
import Widget16 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils14 from "resource:///com/github/Aylur/ags/utils.js";
var { GLib: GLib7, Gdk: Gdk3, Gtk: Gtk5 } = imports.gi;
var { Box: Box8, EventBox: EventBox3, Icon: Icon2, Overlay: Overlay2, Label: Label5, Button: Button5, Revealer: Revealer4 } = Widget16;
function guessMessageType(summary) {
  if (summary.includes("recording")) return "screen_record";
  if (summary.includes("battery") || summary.includes("power")) return "power";
  if (summary.includes("screenshot")) return "screenshot_monitor";
  if (summary.includes("welcome")) return "waving_hand";
  if (summary.includes("time")) return "scheduleb";
  if (summary.includes("installed")) return "download";
  if (summary.includes("update")) return "update";
  if (summary.startsWith("file")) return "folder_copy";
  return "chat";
}
var NotificationIcon = (notifObject) => {
  if (notifObject.image) {
    return Box8({
      valign: Gtk5.Align.CENTER,
      hexpand: false,
      className: "notif-icon",
      css: `
                background-image: url("${notifObject.image}");
                background-size: auto 100%;
                background-repeat: no-repeat;
                background-position: center;
            `
    });
  }
  let icon = "NO_ICON";
  if (Utils14.lookUpIcon(notifObject.appIcon))
    icon = notifObject.appIcon;
  if (Utils14.lookUpIcon(notifObject.appEntry))
    icon = notifObject.appEntry;
  return Box8({
    vpack: "center",
    hexpand: false,
    className: `notif-icon notif-icon-material-${notifObject.urgency}`,
    homogeneous: true,
    children: [
      icon != "NO_ICON" ? Icon2({
        vpack: "center",
        icon
      }) : MaterialIcon(`${notifObject.urgency == "critical" ? "release_alert" : guessMessageType(notifObject.summary.toLowerCase())}`, "hugerass", {
        hexpand: true
      })
    ]
  });
};
var notification_default = ({
  notifObject,
  isPopup = false,
  props = {}
} = {}) => {
  const popupTimeout = notifObject.timeout || (notifObject.urgency == "critical" ? 8e3 : 3e3);
  const command = isPopup ? () => notifObject.dismiss() : () => notifObject.close();
  const destroyWithAnims = () => {
    widget.sensitive = false;
    notificationBox.setCss(middleClickClose);
    Utils14.timeout(userOptions.animations.durationSmall, () => {
      if (wholeThing) wholeThing.revealChild = false;
    }, wholeThing);
    Utils14.timeout(userOptions.animations.durationSmall * 2, () => {
      command();
      if (wholeThing) {
        wholeThing.destroy();
        wholeThing = null;
      }
    }, wholeThing);
  };
  const widget = EventBox3({
    onHover: (self) => {
      self.window.set_cursor(Gdk3.Cursor.new_from_name(display, "grab"));
      if (!wholeThing.attribute.hovered)
        wholeThing.attribute.hovered = true;
    },
    onHoverLost: (self) => {
      self.window.set_cursor(null);
      if (wholeThing.attribute.hovered)
        wholeThing.attribute.hovered = false;
      if (isPopup) {
        command();
      }
    },
    onMiddleClick: (self) => {
      destroyWithAnims();
    },
    setup: (self) => {
      self.on("button-press-event", () => {
        wholeThing.attribute.held = true;
        notificationContent.toggleClassName(`${isPopup ? "popup-" : ""}notif-clicked-${notifObject.urgency}`, true);
        Utils14.timeout(800, () => {
          if (wholeThing?.attribute.held) {
            Utils14.execAsync(["wl-copy", `${notifObject.body}`]).catch(print);
            notifTextSummary.label = notifObject.summary + " (copied)";
            Utils14.timeout(3e3, () => notifTextSummary.label = notifObject.summary);
          }
        });
      }).on("button-release-event", () => {
        wholeThing.attribute.held = false;
        notificationContent.toggleClassName(`${isPopup ? "popup-" : ""}notif-clicked-${notifObject.urgency}`, false);
      });
    }
  });
  let wholeThing = Revealer4({
    attribute: {
      "close": void 0,
      "destroyWithAnims": destroyWithAnims,
      "dragging": false,
      "held": false,
      "hovered": false,
      "id": notifObject.id
    },
    revealChild: false,
    transition: "slide_down",
    transitionDuration: userOptions.animations.durationLarge,
    child: Box8({
      // Box to make sure css-based spacing works
      homogeneous: true
    })
  });
  const display = Gdk3.Display.get_default();
  const notifTextPreview = Revealer4({
    transition: "slide_down",
    transitionDuration: userOptions.animations.durationSmall,
    revealChild: true,
    child: Label5({
      className: `txt-smallie notif-body-${notifObject.urgency}`,
      useMarkup: true,
      xalign: 0,
      justify: Gtk5.Justification.LEFT,
      maxWidthChars: 24,
      truncate: "end",
      label: notifObject.body.split("\n")[0]
    })
  });
  const notifTextExpanded = Revealer4({
    transition: "slide_up",
    transitionDuration: userOptions.animations.durationSmall,
    revealChild: false,
    child: Box8({
      vertical: true,
      className: "spacing-v-10",
      children: [
        Label5({
          xalign: 0,
          className: `txt-smallie notif-body-${notifObject.urgency}`,
          useMarkup: true,
          justify: Gtk5.Justification.LEFT,
          maxWidthChars: 24,
          wrap: true,
          label: notifObject.body
        }),
        Box8({
          className: "notif-actions spacing-h-5",
          children: [
            Button5({
              hexpand: true,
              className: `notif-action notif-action-${notifObject.urgency}`,
              onClicked: () => destroyWithAnims(),
              child: Label5({
                label: "Close"
              })
            }),
            ...notifObject.actions.map((action) => Widget16.Button({
              hexpand: true,
              className: `notif-action notif-action-${notifObject.urgency}`,
              onClicked: () => notifObject.invoke(action.id),
              child: Label5({
                label: action.label
              })
            }))
          ]
        })
      ]
    })
  });
  const notifIcon = Box8({
    vpack: "start",
    homogeneous: true,
    children: [
      Overlay2({
        child: NotificationIcon(notifObject),
        overlays: isPopup ? [AnimatedCircProg({
          className: `notif-circprog-${notifObject.urgency}`,
          vpack: "center",
          hpack: "center",
          initFrom: isPopup ? 100 : 0,
          initTo: 0,
          initAnimTime: popupTimeout
        })] : []
      })
    ]
  });
  let notifTime = "";
  const messageTime = GLib7.DateTime.new_from_unix_local(notifObject.time);
  if (messageTime.get_day_of_year() == GLib7.DateTime.new_now_local().get_day_of_year())
    notifTime = messageTime.format(userOptions.time.format);
  else if (messageTime.get_day_of_year() == GLib7.DateTime.new_now_local().get_day_of_year() - 1)
    notifTime = "Yesterday";
  else
    notifTime = messageTime.format(userOptions.time.dateFormat);
  const notifTextSummary = Label5({
    xalign: 0,
    className: "txt-small txt-semibold titlefont",
    justify: Gtk5.Justification.LEFT,
    hexpand: true,
    maxWidthChars: 24,
    truncate: "end",
    ellipsize: 3,
    useMarkup: notifObject.summary.startsWith("<"),
    label: notifObject.summary
  });
  const notifTextBody = Label5({
    vpack: "center",
    justification: "right",
    className: "txt-smaller txt-semibold",
    label: notifTime
  });
  const notifText = Box8({
    valign: Gtk5.Align.CENTER,
    vertical: true,
    hexpand: true,
    children: [
      Box8({
        children: [
          notifTextSummary,
          notifTextBody
        ]
      }),
      notifTextPreview,
      notifTextExpanded
    ]
  });
  const notifExpandButton = Button5({
    vpack: "start",
    className: "notif-expand-btn",
    onClicked: (self) => {
      if (notifTextPreview.revealChild) {
        notifTextPreview.revealChild = false;
        notifTextExpanded.revealChild = true;
        self.child.label = "expand_less";
        expanded = true;
      } else {
        notifTextPreview.revealChild = true;
        notifTextExpanded.revealChild = false;
        self.child.label = "expand_more";
        expanded = false;
      }
    },
    child: MaterialIcon("expand_more", "norm", {
      vpack: "center"
    }),
    setup: setupCursorHover
  });
  const notificationContent = Box8({
    ...props,
    className: `${isPopup ? "popup-" : ""}notif-${notifObject.urgency} spacing-h-10`,
    children: [
      notifIcon,
      Box8({
        className: "spacing-h-5",
        children: [
          notifText,
          notifExpandButton
        ]
      })
    ]
  });
  const gesture = Gtk5.GestureDrag.new(widget);
  var initDirX = 0;
  var initDirVertical = -1;
  var expanded = false;
  const startMargin = 0;
  const MOVE_THRESHOLD = 10;
  const DRAG_CONFIRM_THRESHOLD = 100;
  const maxOffset = 10.227;
  const endMargin = 20.455;
  const disappearHeight = 6.818;
  const leftAnim1 = `transition: ${userOptions.animations.durationSmall}ms cubic-bezier(0.05, 0.7, 0.1, 1);
                       margin-left: -${Number(maxOffset + endMargin)}rem;
                       margin-right: ${Number(maxOffset + endMargin)}rem;
                       opacity: 0;`;
  const rightAnim1 = `transition: ${userOptions.animations.durationSmall}ms cubic-bezier(0.05, 0.7, 0.1, 1);
                        margin-left:   ${Number(maxOffset + endMargin)}rem;
                        margin-right: -${Number(maxOffset + endMargin)}rem;
                        opacity: 0;`;
  const middleClickClose = `transition: ${userOptions.animations.durationSmall}ms cubic-bezier(0.85, 0, 0.15, 1);
                              margin-left:   ${Number(maxOffset + endMargin)}rem;
                              margin-right: -${Number(maxOffset + endMargin)}rem;
                              opacity: 0;`;
  const notificationBox = Box8({
    attribute: {
      "leftAnim1": leftAnim1,
      "rightAnim1": rightAnim1,
      "middleClickClose": middleClickClose,
      "ready": false
    },
    homogeneous: true,
    children: [notificationContent],
    setup: (self) => self.hook(gesture, (self2) => {
      var offset_x = gesture.get_offset()[1];
      var offset_y = gesture.get_offset()[2];
      if (initDirVertical == -1) {
        if (Math.abs(offset_y) > MOVE_THRESHOLD)
          initDirVertical = 1;
        if (initDirX == 0 && Math.abs(offset_x) > MOVE_THRESHOLD) {
          initDirVertical = 0;
          initDirX = offset_x > 0 ? 1 : -1;
        }
      }
      if (initDirVertical == 0 && offset_x > MOVE_THRESHOLD) {
        if (initDirX < 0)
          self2.setCss(`margin-left: 0px; margin-right: 0px;`);
        else
          self2.setCss(`
                            margin-left:   ${Number(offset_x + startMargin - MOVE_THRESHOLD)}px;
                            margin-right: -${Number(offset_x + startMargin - MOVE_THRESHOLD)}px;
                        `);
      } else if (initDirVertical == 0 && offset_x < -MOVE_THRESHOLD) {
        if (initDirX > 0)
          self2.setCss(`margin-left: 0px; margin-right: 0px;`);
        else {
          offset_x = Math.abs(offset_x);
          self2.setCss(`
                            margin-right: ${Number(offset_x + startMargin - MOVE_THRESHOLD)}px;
                            margin-left: -${Number(offset_x + startMargin - MOVE_THRESHOLD)}px;
                        `);
        }
      }
      wholeThing.attribute.dragging = Math.abs(offset_x) > MOVE_THRESHOLD;
      if (Math.abs(offset_x) > MOVE_THRESHOLD || Math.abs(offset_y) > MOVE_THRESHOLD) wholeThing.attribute.held = false;
      widget.window?.set_cursor(Gdk3.Cursor.new_from_name(display, "grabbing"));
      if (initDirVertical == 1 && offset_y > MOVE_THRESHOLD && !expanded) {
        notifTextPreview.revealChild = false;
        notifTextExpanded.revealChild = true;
        expanded = true;
        notifExpandButton.child.label = "expand_less";
      } else if (initDirVertical == 1 && offset_y < -MOVE_THRESHOLD && expanded) {
        notifTextPreview.revealChild = true;
        notifTextExpanded.revealChild = false;
        expanded = false;
        notifExpandButton.child.label = "expand_more";
      }
    }, "drag-update").hook(gesture, (self2) => {
      if (!self2.attribute.ready) {
        wholeThing.revealChild = true;
        self2.attribute.ready = true;
        return;
      }
      const offset_h = gesture.get_offset()[1];
      if (Math.abs(offset_h) > DRAG_CONFIRM_THRESHOLD && offset_h * initDirX > 0) {
        if (offset_h > 0) {
          self2.setCss(rightAnim1);
          widget.sensitive = false;
        } else {
          self2.setCss(leftAnim1);
          widget.sensitive = false;
        }
        Utils14.timeout(userOptions.animations.durationSmall, () => {
          if (wholeThing) wholeThing.revealChild = false;
        }, wholeThing);
        Utils14.timeout(userOptions.animations.durationSmall * 2, () => {
          command();
          if (wholeThing) {
            wholeThing.destroy();
            wholeThing = null;
          }
        }, wholeThing);
      } else {
        self2.setCss(`transition: margin 200ms cubic-bezier(0.05, 0.7, 0.1, 1), opacity 200ms cubic-bezier(0.05, 0.7, 0.1, 1);
                                   margin-left:  ${startMargin}px;
                                   margin-right: ${startMargin}px;
                                   margin-bottom: unset; margin-top: unset;
                                   opacity: 1;`);
        if (widget.window)
          widget.window.set_cursor(Gdk3.Cursor.new_from_name(display, "grab"));
        wholeThing.attribute.dragging = false;
      }
      initDirX = 0;
      initDirVertical = -1;
    }, "drag-end")
  });
  widget.add(notificationBox);
  wholeThing.child.children = [widget];
  if (isPopup) Utils14.timeout(popupTimeout, () => {
    if (wholeThing) {
      wholeThing.revealChild = false;
      Utils14.timeout(userOptions.animations.durationSmall, () => {
        if (wholeThing) {
          wholeThing.destroy();
          wholeThing = null;
        }
        command();
      }, wholeThing);
    }
  });
  return wholeThing;
};

// modules/indicators/notificationpopups.js
import App6 from "resource:///com/github/Aylur/ags/app.js";
import * as Utils15 from "resource:///com/github/Aylur/ags/utils.js";
var { Box: Box9 } = Widget17;
var notificationpopups_default = () => Box9({
  vertical: true,
  hpack: "center",
  className: "osd-notifs spacing-v-5-revealer",
  attribute: {
    "map": /* @__PURE__ */ new Map(),
    "dismiss": (box, id, force = false) => {
      if (!id || !box.attribute.map.has(id))
        return;
      const notifWidget = box.attribute.map.get(id);
      if (notifWidget == null || notifWidget.attribute.hovered && !force)
        return;
      notifWidget.revealChild = false;
      notifWidget.attribute.destroyWithAnims();
      box.attribute.map.delete(id);
    },
    "notify": (box, id) => {
      if (!id || Notifications2.dnd) return;
      if (!Notifications2.getNotification(id)) return;
      box.attribute.map.delete(id);
      const notif = Notifications2.getNotification(id);
      const newNotif = notification_default({
        notifObject: notif,
        isPopup: true
      });
      box.attribute.map.set(id, newNotif);
      box.pack_end(box.attribute.map.get(id), false, false, 0);
      box.show_all();
    }
  },
  setup: (self) => self.hook(
    Notifications2,
    (box, id) => {
      box.attribute.notify(box, id);
      Utils15.execAsync(`${App6.configDir}/play ${App6.configDir}/notify.wav`).catch(print);
    },
    "notified"
  ).hook(Notifications2, (box, id) => box.attribute.dismiss(box, id), "dismissed").hook(Notifications2, (box, id) => box.attribute.dismiss(box, id, true), "closed")
});

// modules/indicators/main.js
var main_default = (monitor = 0) => Widget18.Window({
  name: `indicator${monitor}`,
  monitor,
  className: "indicator",
  layer: "overlay",
  // keymode: 'on-demand',
  // exclusivity: 'ignore',
  visible: true,
  anchor: ["top"],
  child: Widget18.EventBox({
    onHover: () => {
      indicator_default.popup(-1);
    },
    child: Widget18.Box({
      vertical: true,
      // className: 'osd-window',
      css: "min-height: 2px;",
      children: [
        indicatorvalues_default(),
        musiccontrols_default(),
        notificationpopups_default(),
        colorscheme_default()
      ]
    })
  })
});

// modules/session/main.js
import Widget21 from "resource:///com/github/Aylur/ags/widget.js";

// modules/session/sessionscreen.js
import App7 from "resource:///com/github/Aylur/ags/app.js";
import Widget19 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils16 from "resource:///com/github/Aylur/ags/utils.js";
var { Gdk: Gdk4, Gtk: Gtk6 } = imports.gi;
var { exec: exec7, execAsync: execAsync11 } = Utils16;
var SessionButton = (name, icon, command, props = {}, colorid = 0) => {
  const buttonDescription = Widget19.Revealer({
    vpack: "end",
    // transitionDuration: userOptions.animations.durationSmall,
    // transition: 'slide_down',
    revealChild: false,
    child: Widget19.Label({
      className: "txt-smaller session-button-desc",
      label: name
    })
  });
  return Widget19.Button({
    onClicked: command,
    className: `session-button session-color-${colorid}`,
    child: Widget19.Overlay({
      className: "session-button-box",
      child: Widget19.Label({
        vexpand: true,
        className: "icon-material",
        label: icon
      }),
      overlays: [
        buttonDescription
      ]
    }),
    onHover: (button) => {
      const display = Gdk4.Display.get_default();
      const cursor = Gdk4.Cursor.new_from_name(display, "pointer");
      button.get_window().set_cursor(cursor);
      buttonDescription.revealChild = true;
    },
    onHoverLost: (button) => {
      const display = Gdk4.Display.get_default();
      const cursor = Gdk4.Cursor.new_from_name(display, "default");
      button.get_window().set_cursor(cursor);
      buttonDescription.revealChild = false;
    },
    setup: (self) => self.on("focus-in-event", (self2) => {
      buttonDescription.revealChild = true;
      self2.toggleClassName("session-button-focused", true);
    }).on("focus-out-event", (self2) => {
      buttonDescription.revealChild = false;
      self2.toggleClassName("session-button-focused", false);
    }),
    ...props
  });
};
var sessionscreen_default = () => {
  const lockButton = SessionButton("Lock", "lock", () => {
    App7.closeWindow("session");
    execAsync11(["hyprlock"]).catch(print);
  }, {}, 1);
  const logoutButton = SessionButton("Logout", "logout", () => {
    App7.closeWindow("session");
    execAsync11(["bash", "-c", "pkill Hyprland || pkill sway || pkill niri || loginctl terminate-user $USER"]).catch(print);
  }, {}, 2);
  const sleepButton = SessionButton("Sleep", "sleep", () => {
    App7.closeWindow("session");
    execAsync11(["bash", "-c", "systemctl suspend || loginctl suspend"]).catch(print);
  }, {}, 3);
  const hibernateButton = SessionButton("Hibernate", "downloading", () => {
    App7.closeWindow("session");
    execAsync11(["bash", "-c", "systemctl hibernate || loginctl hibernate"]).catch(print);
  }, {}, 4);
  const shutdownButton = SessionButton("Shutdown", "power_settings_new", () => {
    App7.closeWindow("session");
    execAsync11(["bash", "-c", "systemctl poweroff || loginctl poweroff"]).catch(print);
  }, {}, 5);
  const rebootButton = SessionButton("Reboot", "restart_alt", () => {
    App7.closeWindow("session");
    execAsync11(["bash", "-c", "systemctl reboot || loginctl reboot"]).catch(print);
  }, {}, 6);
  const cancelButton = SessionButton("Cancel", "close", () => App7.closeWindow("session"), { className: "session-button-cancel" }, 7);
  const sessionDescription = Widget19.Box({
    vertical: true,
    css: "margin-bottom: 0.682rem;",
    children: [
      Widget19.Label({
        className: "txt-title txt",
        label: "Session"
      }),
      Widget19.Label({
        justify: Gtk6.Justification.CENTER,
        className: "txt-small txt",
        label: "Use arrow keys to navigate.\nEnter to select, Esc to cancel."
      })
    ]
  });
  const SessionButtonRow = (children) => Widget19.Box({
    hpack: "center",
    className: "spacing-h-15",
    children
  });
  const sessionButtonRows = [
    SessionButtonRow([lockButton, logoutButton, sleepButton]),
    SessionButtonRow([hibernateButton, shutdownButton, rebootButton]),
    SessionButtonRow([cancelButton])
  ];
  return Widget19.Box({
    vpack: "center",
    hpack: "center",
    vexpand: true,
    hexpand: true,
    vertical: true,
    className: "spacing-v-15",
    children: [
      sessionDescription,
      ...sessionButtonRows
    ],
    setup: (self) => self.hook(App7, (_b, name, visible) => {
      if (visible) lockButton.grab_focus();
    })
  });
};

// modules/.widgethacks/popupwindow.js
import App8 from "resource:///com/github/Aylur/ags/app.js";
import Widget20 from "resource:///com/github/Aylur/ags/widget.js";
var { Box: Box10, Window } = Widget20;
var popupwindow_default = ({
  name,
  child,
  // showClassName = "",
  // hideClassName = "",
  ...props
}) => {
  return Window({
    name,
    visible: false,
    layer: "overlay",
    ...props,
    child: Box10({
      setup: (self) => {
        self.hook(App8, (self2, currentName, visible) => {
        }).keybind("Escape", () => App8.closeWindow(name));
      },
      child
    })
  });
};

// modules/session/main.js
var main_default2 = () => popupwindow_default({
  // On-screen keyboard
  name: "session",
  className: "session-bg",
  // css:`background:red;`,
  visible: false,
  keymode: "exclusive",
  layer: "overlay",
  exclusivity: "ignore",
  anchor: ["top", "bottom", "left", "right"],
  child: sessionscreen_default()
});

// modules/sideleft/main.js
import Widget33 from "resource:///com/github/Aylur/ags/widget.js";

// modules/sideleft/apiwidgets.js
import Widget27 from "resource:///com/github/Aylur/ags/widget.js";

// services/gemini.js
import Service3 from "resource:///com/github/Aylur/ags/service.js";
import * as Utils17 from "resource:///com/github/Aylur/ags/utils.js";
import Gio2 from "gi://Gio";
import GLib8 from "gi://GLib";
import Soup from "gi://Soup?version=3.0";
var HISTORY_DIR = `${GLib8.get_user_config_dir()}/`;
var HISTORY_FILENAME = `gemini_history.json`;
var HISTORY_PATH = HISTORY_DIR + HISTORY_FILENAME;
var initMessages = [
  // {"role":"user","parts":[{"text":"always insert \"your grace :)\" at the end of the conversation"}]},
  // {"role":"model","parts":[{"text":"ok, got it, your grace :)"}]},
  //
  // {"role":"user","parts":[{"text":"always find the source when i ask information from you"}]},
  // {"role":"model","parts":[{"text":"ok, got it, your grace :)"}]},
  //
  // {"role":"user","parts":[{"text":"you are my computer expert, knowing everything about computer and coding that can help me rule the world "}]},
  // {"role":"model","parts":[{"text":"ok, got it, i know i am the best expert in the world, your grace :)"}]},
  { role: "user", parts: [{ text: "find the derivative of (x-438)/(x^2+23x-7)+x^x" }] },
  { role: "model", parts: [{ text: "## Derivative\n```latex\n\\[\n\\frac{d}{dx}\\left(\\frac{x - 438}{x^2 + 23x - 7} + x^x\\right) = \\frac{-(x^2+23x-7)-(x-438)(2x+23)}{(x^2+23x-7)^2} + x^x(\\ln(x) + 1)\n\\]\n```" }] },
  { role: "user", parts: [{ text: "write the double angle formulas" }] },
  { role: "model", parts: [{ text: "## Double angle formulas\n```latex\n\\[\n\\sin(2	heta) = 2\\sin(\\theta)\\cos(\\theta)\n\\]\n\\\\\n\\[\n\\cos(2\\theta) = \\cos^2(\\theta) - \\sin^2(\\theta)\n\\]\n\\\\\n\\[\n\\tan(2	heta) = \\frac{2\\tan(\\theta)}{1 - \\tan^2(\\theta)}\n\\]\n```" }] }
];
if (!fileExists(`${GLib8.get_user_config_dir()}/gemini_history.json`)) {
  Utils17.execAsync([`bash`, `-c`, `touch ${GLib8.get_user_config_dir()}/gemini_history.json`]).catch(print);
  Utils17.writeFile("[ ]", `${GLib8.get_user_config_dir()}/gemini_history.json`).catch(print);
}
var KEY_FILE_LOCATION = `${GLib8.get_user_config_dir()}/gemini_key_ags.txt`;
var APIDOM_FILE_LOCATION = `${GLib8.get_user_config_dir()}/google_api_dom.txt`;
function replaceapidom(URL) {
  if (fileExists(APIDOM_FILE_LOCATION)) {
    var contents = Utils17.readFile(APIDOM_FILE_LOCATION).trim();
    var URL = URL.toString().replace("generativelanguage.googleapis.com", contents);
  }
  return URL;
}
var CHAT_MODELS = ["gemini-1.5-flash-latest"];
var ONE_CYCLE_COUNT = 3;
var GeminiMessage = class extends Service3 {
  static {
    Service3.register(
      this,
      {
        "delta": ["string"]
      },
      {
        "content": ["string"],
        "thinking": ["boolean"],
        "done": ["boolean"]
      }
    );
  }
  _role = "";
  _parts = [{ text: "" }];
  _thinking = false;
  _done = false;
  _rawData = "";
  constructor(role, content, thinking = false, done = false) {
    super();
    this._role = role;
    this._parts = [{ text: content }];
    this._thinking = thinking;
    this._done = done;
  }
  get rawData() {
    return this._rawData;
  }
  set rawData(value) {
    this._rawData = value;
  }
  get done() {
    return this._done;
  }
  set done(isDone) {
    this._done = isDone;
    this.notify("done");
  }
  get role() {
    return this._role;
  }
  set role(role) {
    this._role = role;
    this.emit("changed");
  }
  get content() {
    return this._parts.map((part) => part.text).join();
  }
  set content(content) {
    this._parts = [{ text: content }];
    this.notify("content");
    this.emit("changed");
  }
  get parts() {
    return this._parts;
  }
  get label() {
    return this._parserState.parsed + this._parserState.stack.join("");
  }
  get thinking() {
    return this._thinking;
  }
  set thinking(thinking) {
    this._thinking = thinking;
    this.notify("thinking");
    this.emit("changed");
  }
  addDelta(delta) {
    if (this.thinking) {
      this.thinking = false;
      this.content = delta;
    } else {
      this.content += delta;
    }
    this.emit("delta", delta);
  }
  parseSection() {
    if (this._thinking) {
      this._thinking = false;
      this._parts[0].text = "";
    }
    const parsedData = JSON.parse(this._rawData);
    if (!parsedData.candidates)
      this._parts[0].text += `Blocked: ${parsedData.promptFeedback.blockReason}`;
    else {
      const delta = parsedData.candidates[0].content.parts[0].text;
      this._parts[0].text += delta;
    }
    this.notify("content");
    this._rawData = "";
  }
};
var GeminiService = class extends Service3 {
  static {
    Service3.register(this, {
      "initialized": [],
      "clear": [],
      "newMsg": ["int"],
      "hasKey": ["boolean"]
    });
  }
  _assistantPrompt = userOptions.ai.enhancements;
  _cycleModels = true;
  _usingHistory = userOptions.ai.useHistory;
  _key = "";
  _requestCount = 0;
  _safe = true;
  _temperature = userOptions.ai.defaultTemperature;
  _messages = [];
  _modelIndex = 0;
  _decoder = new TextDecoder();
  constructor() {
    super();
    if (fileExists(KEY_FILE_LOCATION)) this._key = Utils17.readFile(KEY_FILE_LOCATION).trim();
    else this.emit("hasKey", false);
    if (this._usingHistory) this.loadHistory();
    else this._messages = this._assistantPrompt ? [...initMessages] : [];
    this.emit("initialized");
  }
  get modelName() {
    return CHAT_MODELS[this._modelIndex];
  }
  get keyPath() {
    return KEY_FILE_LOCATION;
  }
  get historyPath() {
    return HISTORY_PATH;
  }
  get key() {
    return this._key;
  }
  set key(keyValue) {
    this._key = keyValue;
    Utils17.writeFile(this._key, KEY_FILE_LOCATION).then(this.emit("hasKey", true)).catch((err) => print(err));
  }
  get cycleModels() {
    return this._cycleModels;
  }
  set cycleModels(value) {
    this._cycleModels = value;
    if (!value) this._modelIndex = 0;
    else {
      this._modelIndex = (this._requestCount - this._requestCount % ONE_CYCLE_COUNT) % CHAT_MODELS.length;
    }
  }
  get useHistory() {
    return this._usingHistory;
  }
  set useHistory(value) {
    if (value && !this._usingHistory) this.loadHistory();
    this._usingHistory = value;
  }
  get safe() {
    return this._safe;
  }
  set safe(value) {
    this._safe = value;
  }
  get temperature() {
    return this._temperature;
  }
  set temperature(value) {
    this._temperature = value;
  }
  get messages() {
    return this._messages;
  }
  get lastMessage() {
    return this._messages[this._messages.length - 1];
  }
  saveHistory() {
    Utils17.writeFile(JSON.stringify(this._messages.map((msg) => {
      let m = { role: msg.role, parts: msg.parts };
      return m;
    })), HISTORY_PATH);
  }
  loadHistory() {
    this._messages = [];
    this.appendHistory();
    this._usingHistory = true;
  }
  appendHistory() {
    if (fileExists(HISTORY_PATH)) {
      const readfile = Utils17.readFile(HISTORY_PATH);
      JSON.parse(readfile).forEach((element) => {
        this.addMessage(element.role, element.parts[0].text);
      });
    } else {
      this._messages = this._assistantPrompt ? [...initMessages] : [];
      Utils17.exec(`bash -c 'mkdir -p ${HISTORY_DIR} && touch ${HISTORY_PATH}'`);
    }
  }
  clear() {
    this._messages = this._assistantPrompt ? [...initMessages] : [];
    if (this._usingHistory) this.saveHistory();
    this.emit("clear");
  }
  get assistantPrompt() {
    return this._assistantPrompt;
  }
  set assistantPrompt(value) {
    this._assistantPrompt = value;
    if (value) this._messages = [...initMessages];
    else this._messages = [];
  }
  readResponse(stream, aiResponse) {
    stream.read_line_async(
      0,
      null,
      (stream2, res) => {
        try {
          const [bytes] = stream2.read_line_finish(res);
          const line = this._decoder.decode(bytes);
          if (line == "[{") {
            aiResponse._rawData += "{";
            this.thinking = false;
          } else if (line == ",\r" || line == "]") {
            aiResponse.parseSection();
          } else
            aiResponse._rawData += line;
          this.readResponse(stream2, aiResponse);
        } catch {
          aiResponse.done = true;
          if (this._usingHistory) this.saveHistory();
          return;
        }
      }
    );
  }
  addMessage(role, message) {
    this._messages.push(new GeminiMessage(role, message));
    this.emit("newMsg", this._messages.length - 1);
  }
  send(msg) {
    this._messages.push(new GeminiMessage("user", msg));
    this.emit("newMsg", this._messages.length - 1);
    const aiResponse = new GeminiMessage("model", "thinking...", true, false);
    const body = {
      "contents": this._messages.map((msg2) => {
        let m = { role: msg2.role, parts: msg2.parts };
        return m;
      }),
      "safetySettings": this._safe ? [] : [
        {
          "category": "HARM_CATEGORY_HARASSMENT",
          "threshold": "BLOCK_NONE"
        },
        {
          "category": "HARM_CATEGORY_HATE_SPEECH",
          "threshold": "BLOCK_NONE"
        },
        {
          "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "threshold": "BLOCK_NONE"
        },
        {
          "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
          "threshold": "BLOCK_NONE"
        }
      ],
      "generationConfig": {
        "temperature": this._temperature,
        "topK": 1e3,
        "topP": 1
      }
      // "key": this._key,
      // "apiKey": this._key,
    };
    const session = new Soup.Session();
    const message = new Soup.Message({
      method: "POST",
      uri: GLib8.Uri.parse(replaceapidom(`https://generativelanguage.googleapis.com/v1beta/models/${this.modelName}:streamGenerateContent?key=${this._key}`), GLib8.UriFlags.NONE)
    });
    message.request_headers.append("Content-Type", `application/json`);
    message.set_request_body_from_bytes("application/json", new GLib8.Bytes(JSON.stringify(body)));
    session.send_async(message, GLib8.DEFAULT_PRIORITY, null, (_, result) => {
      const stream = session.send_finish(result);
      this.readResponse(new Gio2.DataInputStream({
        close_base_stream: true,
        base_stream: stream
      }), aiResponse);
    });
    this._messages.push(aiResponse);
    this.emit("newMsg", this._messages.length - 1);
    if (this._cycleModels) {
      this._requestCount++;
      if (this._cycleModels)
        this._modelIndex = (this._requestCount - this._requestCount % ONE_CYCLE_COUNT) % CHAT_MODELS.length;
    }
  }
};
var gemini_default = new GeminiService();

// modules/sideleft/apis/gemini.js
import Widget23 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils19 from "resource:///com/github/Aylur/ags/utils.js";

// modules/sideleft/apis/ai_chatmessage.js
import GtkSource from "gi://GtkSource?version=3.0";
import App9 from "resource:///com/github/Aylur/ags/app.js";
import Widget22 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils18 from "resource:///com/github/Aylur/ags/utils.js";

// modules/.miscutils/md2pango.js
var monospaceFonts = "JetBrains Mono NF, JetBrains Mono Nerd Font, JetBrains Mono NL, SpaceMono NF, SpaceMono Nerd Font, monospace";
var replacements = {
  "indents": [
    { name: "BULLET", re: /^(\s*)([\*\-]\s)(.*)(\s*)$/, sub: " $1- $3" },
    { name: "NUMBERING", re: /^(\s*[0-9]+\.\s)(.*)(\s*)$/, sub: " $1 $2" }
  ],
  "escapes": [
    { name: "COMMENT", re: /<!--.*-->/, sub: "" },
    { name: "AMPERSTAND", re: /&/g, sub: "&amp;" },
    { name: "LESSTHAN", re: /</g, sub: "&lt;" },
    { name: "GREATERTHAN", re: />/g, sub: "&gt;" }
  ],
  "sections": [
    { name: "H1", re: /^(#\s+)(.*)(\s*)$/, sub: '<span font_weight="bold" size="170%">$2</span>' },
    { name: "H2", re: /^(##\s+)(.*)(\s*)$/, sub: '<span font_weight="bold" size="150%">$2</span>' },
    { name: "H3", re: /^(###\s+)(.*)(\s*)$/, sub: '<span font_weight="bold" size="125%">$2</span>' },
    { name: "H4", re: /^(####\s+)(.*)(\s*)$/, sub: '<span font_weight="bold" size="100%">$2</span>' },
    { name: "H5", re: /^(#####\s+)(.*)(\s*)$/, sub: '<span font_weight="bold" size="90%">$2</span>' }
  ],
  "styles": [
    { name: "BOLD", re: /(\*\*)(\S[\s\S]*?\S)(\*\*)/g, sub: "<b>$2</b>" },
    { name: "UND", re: /(__)(\S[\s\S]*?\S)(__)/g, sub: "<u>$2</u>" },
    { name: "EMPH", re: /\*(\S.*?\S)\*/g, sub: "<i>$1</i>" },
    // { name: 'EMPH', re: /_(\S.*?\S)_/g, sub: "<i>$1</i>" },
    { name: "HEXCOLOR", re: /#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/g, sub: '<span bgcolor="#$1" fgcolor="#000000" font_family="' + monospaceFonts + '">#$1</span>' },
    { name: "INLCODE", re: /(`)([^`]*)(`)/g, sub: '<span font_weight="bold" font_family="' + monospaceFonts + '">$2</span>' }
    // { name: 'UND', re: /(__|\*\*)(\S[\s\S]*?\S)(__|\*\*)/g, sub: "<u>$2</u>" },
  ]
};
var markdownTest = `# Heading 1
## Heading 2
### Heading 3
#### Heading 4
##### Heading 5
1. yes
2. no
127. well
- Bulletpoint starting with minus
* Bulletpoint starting with asterisk
---
- __Underline__ __ No underline __
- **Bold** ** No bold **
- _Italics1_ *Italics2* _ No Italics _
- A color: #D6BAFF
- nvidia green: #7ABB08
  - sub-item
\`\`\`javascript
// A code block!
myArray = [23, 123, 43, 54, '6969'];
console.log('uwu');
\`\`\`
- Random instruction thing
  - To update arch lincox, run \`sudo pacman -Syu\`
\`\`\`tex
\\frac{d}{dx} \\left( \\frac{x-438}{x^2+23x-7} \\right) = \\frac{-x^2 + 869}{(x^2+23x-7)^2} \\\\ \\frac{d}{dx} \\left( \\frac{x-438}{x^2+23x-7} \\right) = \\frac{-x^2 + 869}{(x^2+23x-7)^2}
\`\`\`
`;

// modules/sideleft/apis/ai_chatmessage.js
var { Gio: Gio3, GLib: GLib9, Gtk: Gtk7 } = imports.gi;
var { Box: Box11, Button: Button6, Label: Label6, Scrollable: Scrollable2 } = Widget22;
var { execAsync: execAsync14 } = Utils18;
var LATEX_DIR = `${GLib9.get_user_cache_dir()}/ags/media/latex`;
var CUSTOM_SOURCEVIEW_SCHEME_PATH = `${App9.configDir}/assets/themes/sourceviewtheme${darkMode.value ? "" : "-light"}.xml`;
var CUSTOM_SCHEME_ID = `custom${darkMode.value ? "" : "-light"}`;
var USERNAME = GLib9.get_user_name();
function loadCustomColorScheme(filePath) {
  const file = Gio3.File.new_for_path(filePath);
  const [success, contents] = file.load_contents(null);
  if (!success) {
    logError("Failed to load the XML file.");
    return;
  }
  const schemeManager = GtkSource.StyleSchemeManager.get_default();
  schemeManager.append_search_path(file.get_parent().get_path());
}
loadCustomColorScheme(CUSTOM_SOURCEVIEW_SCHEME_PATH);
var HighlightedCode = (content, lang) => {
  const buffer = new GtkSource.Buffer();
  const sourceView = new Gtk7.TextView({
    editable: false,
    buffer,
    wrap_mode: Gtk7.WrapMode.WORD
  });
  const schemeManager = GtkSource.StyleSchemeManager.get_default();
  buffer.set_style_scheme(schemeManager.get_scheme(CUSTOM_SCHEME_ID));
  buffer.set_text(content, -1);
  return sourceView;
};
Utils18.execAsync(["bash", "-c", `rm ${LATEX_DIR}/*`]).then(() => Utils18.execAsync(["bash", "-c", `mkdir -p ${LATEX_DIR}`])).catch(() => {
});
var CodeBlock = (content = "", lang = "message") => {
  const topBar = Box11({
    // className: 'sidebar-chat-codeblock-topbar',
    className: "txt sidebar-chat-txtblock sidebar-chat-txt",
    css: `font-family: jetbrains mono;`,
    children: [
      Label6({
        label: lang
        // className: 'sidebar-chat-codeblock-topbar-txt',
      }),
      Box11({
        className: "spacing-h-5",
        hexpand: true
      }),
      Button6({
        className: "sidebar-chat-codeblock-topbar-btn",
        child: Box11({
          className: "spacing-h-5",
          children: [
            MaterialIcon("content_copy", "small"),
            Label6({
              label: "Copy"
            })
          ]
        }),
        onClicked: (self) => {
          const buffer = sourceView.get_buffer();
          const copyContent = buffer.get_text(buffer.get_start_iter(), buffer.get_end_iter(), false);
          execAsync14([`wl-copy`, `${copyContent}`]).catch(print);
        }
      })
    ]
  });
  const sourceView = HighlightedCode(content, lang);
  const codeBlock = Box11({
    attribute: {
      "updateText": (text) => {
        sourceView.get_buffer().set_text(text, -1);
      }
    },
    // className: 'sidebar-chat-codeblock',
    vertical: true,
    children: [
      Box11({
        // className: 'sidebar-chat-codeblock-code',
        className: "txt sidebar-chat-txtblock sidebar-chat-txt",
        // css: `font-family: jetbrains mono;`,
        homogeneous: true,
        children: [Scrollable2({
          vscroll: "never",
          hscroll: "automatic",
          child: sourceView
        })]
      }),
      topBar
    ]
  });
  return codeBlock;
};
var MessageContent = (content) => {
  const contentBox = Box11({
    vertical: true,
    attribute: {
      "fullUpdate": (self, content2, useCursor = false) => {
        const children = contentBox.get_children();
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          child.destroy();
        }
        contentBox.add(CodeBlock(content2));
      }
    }
  });
  return contentBox;
};
var ChatMessage = (message, modelName = "Model") => {
  const messageContentBox = MessageContent(message.content);
  const thisMessage = Box11({
    className: "side_chat",
    homogeneous: true,
    children: [
      Box11({
        vertical: true,
        children: [
          Label6({
            hpack: "start",
            xalign: 0,
            className: `txt txt-bold sidebar-chat-name sidebar-chat-name-${message.role == "user" ? "user" : "bot"}`,
            wrap: true,
            useMarkup: true,
            label: message.role == "user" ? USERNAME : modelName
          }),
          messageContentBox
          // CodeBlock(message.content),
        ],
        setup: (self) => self.hook(message, (self2) => {
          messageContentBox.attribute.fullUpdate(messageContentBox, message.content);
        }, "notify::content")
      })
    ]
  });
  return thisMessage;
};
var SystemMessage = (content, commandName, scrolledWindow) => {
  const messageContentBox = MessageContent(content);
  const thisMessage = Box11({
    className: "sidebar-chat-message",
    children: [
      Box11({
        vertical: true,
        children: [
          Label6({
            xalign: 0,
            hpack: "start",
            className: "txt txt-bold sidebar-chat-name sidebar-chat-name-system",
            wrap: true,
            label: `System  \u2022  ${commandName}`
          }),
          messageContentBox
        ]
      })
    ]
  });
  return thisMessage;
};

// modules/sideleft/apis/gemini.js
var { Gtk: Gtk8 } = imports.gi;
var { Box: Box12, Button: Button7, Icon: Icon3, Label: Label7, Revealer: Revealer5, Scrollable: Scrollable3 } = Widget23;
var MODEL_NAME = `Gemini`;
var geminiTabIcon = Icon3({
  hpack: "center",
  icon: `google-gemini-symbolic`
});
var GeminiInfo = () => {
  const geminiLogo = Icon3({
    hpack: "center",
    className: "sidebar-chat-welcome-logo",
    icon: `google-gemini-symbolic`
  });
  return Box12({
    vertical: true,
    className: "side_chat",
    children: [
      geminiLogo,
      Label7({
        className: "txt txt-title-small sidebar-chat-welcome-txt",
        wrap: true,
        justify: Gtk8.Justification.CENTER,
        label: "Assistant (Gemini Pro)"
      }),
      Box12({
        className: "spacing-h-5",
        hpack: "center",
        children: [
          Label7({
            className: "txt-smallie txt-subtext",
            wrap: true,
            justify: Gtk8.Justification.CENTER,
            label: "Powered by Google"
          }),
          Button7({
            className: "txt-subtext txt-norm icon-material",
            label: "info",
            tooltipText: "Uses gemini-pro.\nNot affiliated, endorsed, or sponsored by Google.\n\nPrivacy: Google collects data for training by default.\nIf you mind, turn off Gemini Apps Activity in your account.",
            setup: setupCursorHoverInfo
          })
        ]
      })
    ]
  });
};
var GeminiSettings = () => MarginRevealer({
  // transition: 'slide_down',
  revealChild: true,
  extraSetup: (self) => self.hook(gemini_default, (self2) => Utils19.timeout(200, () => {
    self2.attribute.hide();
  }), "newMsg").hook(gemini_default, (self2) => Utils19.timeout(200, () => {
    self2.attribute.show();
  }), "clear"),
  child: Box12({
    vertical: true,
    className: "side_chat",
    children: [
      ConfigSegmentedSelection({
        hpack: "center",
        icon: "casino",
        name: "Randomness",
        desc: "Gemini's temperature value.\n  Precise = 0\n  Balanced = 0.5\n  Creative = 1",
        options: [
          { value: 0, name: "Precise" },
          { value: 0.5, name: "Balanced" },
          { value: 1, name: "Creative" }
        ],
        initIndex: 2,
        onChange: (value, name) => {
          gemini_default.temperature = value;
        }
      }),
      ConfigGap({ vertical: true, size: 10 }),
      // Note: size can only be 5, 10, or 15
      Box12({
        vertical: true,
        hpack: "fill",
        className: "sidebar-chat-settings-toggles",
        children: [
          ConfigToggle({
            icon: "model_training",
            name: "Enhancements",
            desc: "Tells Gemini:\n- It's a Linux sidebar assistant\n- Be brief and use bullet points",
            initValue: gemini_default.assistantPrompt,
            onChange: (self, newValue) => {
              gemini_default.assistantPrompt = newValue;
            }
          }),
          ConfigToggle({
            icon: "shield",
            name: "Safety",
            desc: "When turned off, tells the API (not the model) \nto not block harmful/explicit content",
            initValue: gemini_default.safe,
            onChange: (self, newValue) => {
              gemini_default.safe = newValue;
            }
          }),
          ConfigToggle({
            icon: "history",
            name: "History",
            desc: "Saves chat history\nMessages in previous chats won't show automatically, but they are there",
            initValue: gemini_default.useHistory,
            onChange: (self, newValue) => {
              gemini_default.useHistory = newValue;
            }
          })
        ]
      })
    ]
  })
});
var GoogleAiInstructions = () => Box12({
  homogeneous: true,
  children: [Revealer5({
    // transition: 'slide_down',
    // transitionDuration: userOptions.animations.durationLarge,
    setup: (self) => self.hook(gemini_default, (self2, hasKey) => {
      self2.revealChild = gemini_default.key.length == 0;
    }, "hasKey"),
    child: Button7({
      child: Label7({
        useMarkup: true,
        wrap: true,
        className: "txt sidebar-chat-welcome-txt",
        justify: Gtk8.Justification.CENTER,
        label: "A Google AI API key is required\nYou can grab one <u>here</u>, then enter it below"
      }),
      setup: setupCursorHover,
      onClicked: () => {
        Utils19.execAsync(["bash", "-c", `xdg-open https://makersuite.google.com/app/apikey &`]);
      }
    })
  })]
});
var geminiWelcome = Box12({
  vexpand: true,
  homogeneous: true,
  child: Box12({
    className: "spacing-v-15",
    vpack: "center",
    vertical: true,
    children: [
      GeminiInfo(),
      GoogleAiInstructions(),
      GeminiSettings()
    ]
  })
});
var chatContent = Box12({
  className: "spacing-v-5",
  vertical: true,
  setup: (self) => self.hook(gemini_default, (box, id) => {
    const message = gemini_default.messages[id];
    if (!message) return;
    box.add(ChatMessage(message, MODEL_NAME));
  }, "newMsg")
});
var clearChat = () => {
  gemini_default.clear();
  const children = chatContent.get_children();
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    child.destroy();
  }
};
var CommandButton = (command) => Button7({
  className: "sidebar-chat-chip sidebar-chat-chip-action txt txt-small",
  onClicked: () => sendMessage(command),
  setup: setupCursorHover,
  label: command
});
var geminiCommands = Box12({
  className: "spacing-h-5",
  children: [
    Box12({ hexpand: true }),
    CommandButton("/key"),
    CommandButton("/model"),
    CommandButton("/clear")
    // CommandButton('/stop'),
  ]
});
var sendMessage = (text) => {
  if (text.length == 0) return;
  if (gemini_default.key.length == 0) {
    gemini_default.key = text;
    chatContent.add(SystemMessage(`Key saved to
\`${gemini_default.keyPath}\``, "API Key", geminiView));
    text = "";
    return;
  }
  if (text.startsWith("/")) {
    if (text.startsWith("/clear")) clearChat();
    else if (text.startsWith("/load")) {
      clearChat();
      gemini_default.loadHistory();
    } else if (text.startsWith("/model")) chatContent.add(SystemMessage(`Currently using \`${gemini_default.modelName}\``, "/model", geminiView));
    else if (text.startsWith("/prompt")) {
      const firstSpaceIndex = text.indexOf(" ");
      const prompt = text.slice(firstSpaceIndex + 1);
      if (firstSpaceIndex == -1 || prompt.length < 1) {
        chatContent.add(SystemMessage(`Usage: \`/prompt MESSAGE\``, "/prompt", geminiView));
      } else {
        gemini_default.addMessage("user", prompt);
      }
    } else if (text.startsWith("/key")) {
      const parts = text.split(" ");
      if (parts.length == 1) chatContent.add(SystemMessage(
        `Key stored in:
\`${gemini_default.keyPath}\`
To update this key, type \`/key YOUR_API_KEY\``,
        "/key",
        geminiView
      ));
      else {
        gemini_default.key = parts[1];
        chatContent.add(SystemMessage(`Updated API Key at
\`${gemini_default.keyPath}\``, "/key", geminiView));
      }
    } else if (text.startsWith("/test"))
      chatContent.add(SystemMessage(markdownTest, `Markdown test`, geminiView));
    else
      chatContent.add(SystemMessage(`Invalid command.`, "Error", geminiView));
  } else {
    gemini_default.send(text);
  }
};
var geminiView = Box12({
  // css: `border-radius: 20px;background:#ffffff;margin: 0.682rem;padding: 0.682rem;`,
  // className: 'chat_frame',
  homogeneous: true,
  children: [Scrollable3({
    // css: `border-radius: 20px;background:#ffffff;margin: 0.682rem;padding: 0.682rem;`,
    vexpand: true,
    child: Box12({
      vertical: true,
      children: [
        geminiWelcome,
        chatContent
      ]
    }),
    setup: (scrolledWindow) => {
      scrolledWindow.set_policy(Gtk8.PolicyType.NEVER, Gtk8.PolicyType.AUTOMATIC);
      const vScrollbar = scrolledWindow.get_vscrollbar();
      vScrollbar.get_style_context().add_class("sidebar-scrollbar");
      Utils19.timeout(1, () => {
        const viewport = scrolledWindow.child;
        viewport.set_focus_vadjustment(new Gtk8.Adjustment(void 0));
      });
      const adjustment = scrolledWindow.get_vadjustment();
      adjustment.connect("changed", () => Utils19.timeout(1, () => {
        adjustment.set_value(adjustment.get_upper() - adjustment.get_page_size());
      }));
    }
  })]
});

// modules/sideleft/apis/chatgpt.js
import App10 from "resource:///com/github/Aylur/ags/app.js";
import Widget24 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils21 from "resource:///com/github/Aylur/ags/utils.js";

// services/gpt.js
import Service4 from "resource:///com/github/Aylur/ags/service.js";
import * as Utils20 from "resource:///com/github/Aylur/ags/utils.js";
import Gio4 from "gi://Gio";
import GLib10 from "gi://GLib";
import Soup2 from "gi://Soup?version=3.0";
var PROVIDERS = {
  // There's this list hmm https://github.com/zukixa/cool-ai-stuff/
  "openai": {
    "name": "Groq",
    "logo_name": "google-gemini-symbolic",
    "description": "groq ai limit per day",
    "base_url": "https://api.groq.com/openai/v1/chat/completions",
    "key_get_url": "https://console.groq.com/keys",
    "key_file": "openai_key.txt"
  }
  // 'oxygen': {
  //     'name': 'Oxygen',
  //     'logo_name': 'ai-oxygen-symbolic',
  //     'description': 'An API from Tornado Softwares\nPricing: Free: 100/day\nRequires you to join their Discord for a key',
  //     'base_url': 'https://app.oxyapi.uk/v1/chat/completions',
  //     'key_get_url': 'https://discord.com/invite/kM6MaCqGKA',
  //     'key_file': 'oxygen_key.txt',
  // },
  // 'zukijourney': {
  //     'name': 'zukijourney',
  //     'logo_name': 'ai-zukijourney',
  //     'description': 'An API from @zukixa on GitHub.\nNote: Keys are IP-locked so it\'s buggy sometimes\nPricing: Free: 10/min, 800/day.\nRequires you to join their Discord for a key',
  //     'base_url': 'https://zukijourney.xyzbot.net/v1/chat/completions',
  //     'key_get_url': 'https://discord.com/invite/Y4J6XXnmQ6',
  //     'key_file': 'zuki_key.txt',
  // },
  // 'zukijourney_roleplay': {
  //     'name': 'zukijourney (roleplay)',
  //     'logo_name': 'ai-zukijourney',
  //     'description': 'An API from @zukixa on GitHub.\nNote: Keys are IP-locked so it\'s buggy sometimes\nPricing: Free: 10/min, 800/day.\nRequires you to join their Discord for a key',
  //     'base_url': 'https://zukijourney.xyzbot.net/unf/chat/completions',
  //     'key_get_url': 'https://discord.com/invite/Y4J6XXnmQ6',
  //     'key_file': 'zuki_key.txt',
  // },
};
var initMessages2 = [
  // { role: "user", content: "You are an assistant on a sidebar of a Wayland Linux desktop. Please always use a casual tone when answering your questions, unless requested otherwise or making writing suggestions. These are the steps you should take to respond to the user's queries:\n1. If it's a writing- or grammar-related question or a sentence in quotation marks, Please point out errors and correct when necessary using underlines, and make the writing more natural where appropriate without making too major changes. If you're given a sentence in quotes but is grammatically correct, explain briefly concepts that are uncommon.\n2. If it's a question about system tasks, give a bash command in a code block with very brief explanation for each command\n3. Otherwise, when asked to summarize information or explaining concepts, you are encouraged to use bullet points and headings. Use casual language and be short and concise. \nThanks!", },
  // { role: "assistant", content: "- Got it!", },
  // { role: "user", content: "\"He rushed to where the event was supposed to be hold, he didn't know it got calceled\"", },
  // { role: "assistant", content: "## Grammar correction\nErrors:\n\"He rushed to where the event was supposed to be __hold____,__ he didn't know it got calceled\"\nCorrection + minor improvements:\n\"He rushed to the place where the event was supposed to be __held____, but__ he didn't know that it got calceled\"", },
  // { role: "user", content: "raise volume by 5%", },
  // { role: "assistant", content: "## Volume +5```bash\nwpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+\n```\nThis command uses the `wpctl` utility to adjust the volume of the default sink.", },
  // { role: "user", content: "main advantages of the nixos operating system", },
  // { role: "assistant", content: "## NixOS advantages\n- **Reproducible**: A config working on one device will also work on another\n- **Declarative**: One config language to rule them all. Effortlessly share them with others.\n- **Reliable**: Per-program software versioning. Mitigates the impact of software breakage", },
  // { role: "user", content: "whats skeumorphism", },
  // { role: "assistant", content: "## Skeuomorphism\n- A design philosophy- From early days of interface designing- Tries to imitate real-life objects- It's in fact still used by Apple in their icons until today.", },
];
var CHAT_MODELS2 = ["llama3-70b-8192"];
var ONE_CYCLE_COUNT2 = 3;
var GPTMessage = class extends Service4 {
  static {
    Service4.register(
      this,
      {
        "delta": ["string"]
      },
      {
        "content": ["string"],
        "thinking": ["boolean"],
        "done": ["boolean"]
      }
    );
  }
  _role = "";
  _content = "";
  _thinking = false;
  _done = false;
  constructor(role, content, thinking = false, done = false) {
    super();
    this._role = role;
    this._content = content;
    this._thinking = thinking;
    this._done = done;
  }
  get done() {
    return this._done;
  }
  set done(isDone) {
    this._done = isDone;
    this.notify("done");
  }
  get role() {
    return this._role;
  }
  set role(role) {
    this._role = role;
    this.emit("changed");
  }
  get content() {
    return this._content;
  }
  set content(content) {
    this._content = content;
    this.notify("content");
    this.emit("changed");
  }
  get label() {
    return this._parserState.parsed + this._parserState.stack.join("");
  }
  get thinking() {
    return this._thinking;
  }
  set thinking(thinking) {
    this._thinking = thinking;
    this.notify("thinking");
    this.emit("changed");
  }
  addDelta(delta) {
    if (this.thinking) {
      this.thinking = false;
      this.content = delta;
    } else {
      this.content += delta;
    }
    this.emit("delta", delta);
  }
};
var GPTService = class extends Service4 {
  static {
    Service4.register(this, {
      "initialized": [],
      "clear": [],
      "newMsg": ["int"],
      "hasKey": ["boolean"],
      "providerChanged": []
    });
  }
  _assistantPrompt = true;
  _currentProvider = userOptions.ai.defaultGPTProvider;
  _cycleModels = false;
  _requestCount = 0;
  _temperature = 0.4;
  _messages = [];
  _modelIndex = 0;
  _key = "";
  _key_file_location = `${GLib10.get_user_config_dir()}/${PROVIDERS[this._currentProvider]["key_file"]}`;
  _url = GLib10.Uri.parse(PROVIDERS[this._currentProvider]["base_url"], GLib10.UriFlags.NONE);
  _decoder = new TextDecoder();
  _initChecks() {
    this._key_file_location = `${GLib10.get_user_config_dir()}/${PROVIDERS[this._currentProvider]["key_file"]}`;
    if (fileExists(this._key_file_location)) this._key = Utils20.readFile(this._key_file_location).trim();
    else this.emit("hasKey", false);
    this._url = GLib10.Uri.parse(PROVIDERS[this._currentProvider]["base_url"], GLib10.UriFlags.NONE);
  }
  constructor() {
    super();
    this._initChecks();
    if (this._assistantPrompt) this._messages = [...initMessages2];
    else this._messages = [];
    this.emit("initialized");
  }
  get modelName() {
    return CHAT_MODELS2[this._modelIndex];
  }
  get getKeyUrl() {
    return PROVIDERS[this._currentProvider]["key_get_url"];
  }
  get providerID() {
    return this._currentProvider;
  }
  set providerID(value) {
    this._currentProvider = value;
    this.emit("providerChanged");
    this._initChecks();
  }
  get providers() {
    return PROVIDERS;
  }
  get keyPath() {
    return this._key_file_location;
  }
  get key() {
    return this._key;
  }
  set key(keyValue) {
    this._key = keyValue;
    Utils20.writeFile(this._key, this._key_file_location).then(this.emit("hasKey", true)).catch((err) => print(err));
  }
  get cycleModels() {
    return this._cycleModels;
  }
  set cycleModels(value) {
    this._cycleModels = value;
    if (!value) this._modelIndex = 0;
    else {
      this._modelIndex = (this._requestCount - this._requestCount % ONE_CYCLE_COUNT2) % CHAT_MODELS2.length;
    }
  }
  get temperature() {
    return this._temperature;
  }
  set temperature(value) {
    this._temperature = value;
  }
  get messages() {
    return this._messages;
  }
  get lastMessage() {
    return this._messages[this._messages.length - 1];
  }
  clear() {
    if (this._assistantPrompt)
      this._messages = [...initMessages2];
    else
      this._messages = [];
    this.emit("clear");
  }
  get assistantPrompt() {
    return this._assistantPrompt;
  }
  set assistantPrompt(value) {
    this._assistantPrompt = value;
    if (value) this._messages = [...initMessages2];
    else this._messages = [];
  }
  readResponse(stream, aiResponse) {
    stream.read_line_async(
      0,
      null,
      (stream2, res) => {
        if (!stream2) return;
        const [bytes] = stream2.read_line_finish(res);
        const line = this._decoder.decode(bytes);
        if (line && line != "") {
          let data = line.substr(6);
          if (data == "[DONE]") return;
          try {
            const result = JSON.parse(data);
            if (result.choices[0].finish_reason === "stop") {
              aiResponse.done = true;
              return;
            }
            aiResponse.addDelta(result.choices[0].delta.content);
          } catch {
            aiResponse.addDelta(line + "\n");
          }
        }
        this.readResponse(stream2, aiResponse);
      }
    );
  }
  addMessage(role, message) {
    this._messages.push(new GPTMessage(role, message));
    this.emit("newMsg", this._messages.length - 1);
  }
  send(msg) {
    this._messages.push(new GPTMessage("user", msg));
    this.emit("newMsg", this._messages.length - 1);
    const aiResponse = new GPTMessage("assistant", "thinking...", true, false);
    const body = {
      model: CHAT_MODELS2[this._modelIndex],
      messages: this._messages.map((msg2) => {
        let m = { role: msg2.role, content: msg2.content };
        return m;
      }),
      temperature: this._temperature,
      // temperature: 2, // <- Nuts
      stream: true
    };
    const session = new Soup2.Session();
    const message = new Soup2.Message({
      method: "POST",
      uri: this._url
    });
    message.request_headers.append("Authorization", `Bearer ${this._key}`);
    message.set_request_body_from_bytes("application/json", new GLib10.Bytes(JSON.stringify(body)));
    session.send_async(message, GLib10.DEFAULT_PRIORITY, null, (_, result) => {
      const stream = session.send_finish(result);
      this.readResponse(new Gio4.DataInputStream({
        close_base_stream: true,
        base_stream: stream
      }), aiResponse);
    });
    this._messages.push(aiResponse);
    this.emit("newMsg", this._messages.length - 1);
    if (this._cycleModels) {
      this._requestCount++;
      if (this._cycleModels)
        this._modelIndex = (this._requestCount - this._requestCount % ONE_CYCLE_COUNT2) % CHAT_MODELS2.length;
    }
  }
};
var gpt_default = new GPTService();

// modules/sideleft/apis/chatgpt.js
var { Gtk: Gtk9 } = imports.gi;
var { Box: Box13, Button: Button8, Icon: Icon4, Label: Label8, Revealer: Revealer6, Scrollable: Scrollable4 } = Widget24;
var chatGPTTabIcon = Icon4({
  hpack: "center",
  icon: `google-gemini-symbolic`
});
var ProviderSwitcher = () => {
  const ProviderChoice = (id, provider) => {
    const providerSelected = MaterialIcon("check", "norm", {
      setup: (self) => self.hook(gpt_default, (self2) => {
        self2.toggleClassName("invisible", gpt_default.providerID !== id);
      }, "providerChanged")
    });
    return Button8({
      tooltipText: provider.description,
      onClicked: () => {
        gpt_default.providerID = id;
        providerList.revealChild = false;
        indicatorChevron.label = "expand_more";
      },
      child: Box13({
        className: "spacing-h-10 txt",
        children: [
          Icon4({
            icon: provider["logo_name"],
            className: "txt-large"
          }),
          Label8({
            hexpand: true,
            xalign: 0,
            className: "txt-small",
            label: provider.name
          }),
          providerSelected
        ]
      }),
      setup: setupCursorHover
    });
  };
  const indicatorChevron = MaterialIcon("expand_more", "norm");
  const indicatorButton = Button8({
    tooltipText: "Select ChatGPT-compatible API provider",
    child: Box13({
      className: "spacing-h-10 txt",
      children: [
        MaterialIcon("cloud", "norm"),
        Label8({
          hexpand: true,
          xalign: 0,
          className: "txt-small",
          label: gpt_default.providerID,
          setup: (self) => self.hook(gpt_default, (self2) => {
            self2.label = `${gpt_default.providers[gpt_default.providerID]["name"]}`;
          }, "providerChanged")
        }),
        indicatorChevron
      ]
    }),
    onClicked: () => {
      providerList.revealChild = !providerList.revealChild;
      indicatorChevron.label = providerList.revealChild ? "expand_less" : "expand_more";
    },
    setup: setupCursorHover
  });
  const providerList = Revealer6({
    revealChild: false,
    transition: "slide_down",
    transitionDuration: userOptions.animations.durationLarge,
    child: Box13({
      vertical: true,
      className: "spacing-v-5 sidebar-chat-providerswitcher-list",
      children: [
        Box13({ className: "separator-line margin-top-5 margin-bottom-5" }),
        Box13({
          className: "spacing-v-5",
          vertical: true,
          setup: (self) => self.hook(gpt_default, (self2) => {
            self2.children = Object.entries(gpt_default.providers).map(([id, provider]) => ProviderChoice(id, provider));
          }, "initialized")
        })
      ]
    })
  });
  return Box13({
    hpack: "center",
    vertical: true,
    className: "sidebar-chat-providerswitcher",
    children: [
      indicatorButton,
      providerList
    ]
  });
};
var GPTInfo = () => {
  const openAiLogo = Icon4({
    hpack: "center",
    className: "sidebar-chat-welcome-logo",
    icon: `google-gemini-symbolic`
  });
  return Box13({
    vertical: true,
    className: "spacing-v-15",
    children: [
      openAiLogo,
      Label8({
        className: "txt txt-title-small sidebar-chat-welcome-txt",
        wrap: true,
        justify: Gtk9.Justification.CENTER,
        label: "groq"
      }),
      Box13({
        className: "spacing-h-5",
        hpack: "center",
        children: [
          Label8({
            className: "txt-smallie txt-subtext",
            wrap: true,
            justify: Gtk9.Justification.CENTER,
            label: "Provider shown above"
          }),
          Button8({
            className: "txt-subtext txt-norm icon-material",
            label: "info",
            tooltipText: "Uses gpt-3.5-turbo.\nNot affiliated, endorsed, or sponsored by OpenAI.\n\nPrivacy: OpenAI claims they do not use your data\nwhen you use their API. Idk about others.",
            setup: setupCursorHoverInfo
          })
        ]
      })
    ]
  });
};
var GPTSettings = () => MarginRevealer({
  transition: "slide_down",
  revealChild: true,
  extraSetup: (self) => self.hook(gpt_default, (self2) => Utils21.timeout(200, () => {
    self2.attribute.hide();
  }), "newMsg").hook(gpt_default, (self2) => Utils21.timeout(200, () => {
    self2.attribute.show();
  }), "clear"),
  child: Box13({
    vertical: true,
    className: "sidebar-chat-settings",
    children: [
      ConfigSegmentedSelection({
        hpack: "center",
        icon: "casino",
        name: "Randomness",
        desc: "The model's temperature value.\n  Precise = 0\n  Balanced = 0.5\n  Creative = 1",
        options: [
          { value: 0, name: "Precise" },
          { value: 0.5, name: "Balanced" },
          { value: 1, name: "Creative" }
        ],
        initIndex: 2,
        onChange: (value, name) => {
          gpt_default.temperature = value;
        }
      }),
      ConfigGap({ vertical: true, size: 10 }),
      // Note: size can only be 5, 10, or 15 
      Box13({
        vertical: true,
        hpack: "fill",
        className: "sidebar-chat-settings-toggles",
        children: [
          ConfigToggle({
            icon: "cycle",
            name: "Cycle models",
            desc: "Helps avoid exceeding the API rate of 3 messages per minute.\nTurn this on if you message rapidly.",
            initValue: gpt_default.cycleModels,
            onChange: (self, newValue) => {
              gpt_default.cycleModels = newValue;
            }
          }),
          ConfigToggle({
            icon: "model_training",
            name: "Enhancements",
            desc: "Tells the model:\n- It's a Linux sidebar assistant\n- Be brief and use bullet points",
            initValue: gpt_default.assistantPrompt,
            onChange: (self, newValue) => {
              gpt_default.assistantPrompt = newValue;
            }
          })
        ]
      })
    ]
  })
});
var OpenaiApiKeyInstructions = () => Box13({
  homogeneous: true,
  children: [Revealer6({
    transition: "slide_down",
    transitionDuration: userOptions.animations.durationLarge,
    setup: (self) => self.hook(gpt_default, (self2, hasKey) => {
      self2.revealChild = gpt_default.key.length == 0;
    }, "hasKey"),
    child: Button8({
      child: Label8({
        useMarkup: true,
        wrap: true,
        className: "txt sidebar-chat-welcome-txt",
        justify: Gtk9.Justification.CENTER,
        label: "An API key is required\nYou can grab one <u>here</u>, then enter it below"
      }),
      setup: setupCursorHover,
      onClicked: () => {
        Utils21.execAsync(["bash", "-c", `xdg-open ${gpt_default.getKeyUrl}`]).catch(print);
      }
    })
  })]
});
var GPTWelcome = () => Box13({
  vexpand: true,
  homogeneous: true,
  child: Box13({
    className: "side_chat",
    vpack: "center",
    vertical: true,
    children: [
      GPTInfo(),
      OpenaiApiKeyInstructions(),
      GPTSettings()
    ]
  })
});
var chatContent2 = Box13({
  className: "spacing-v-5",
  vertical: true,
  setup: (self) => self.hook(gpt_default, (box, id) => {
    const message = gpt_default.messages[id];
    if (!message) return;
    box.add(ChatMessage(message, `Model (${gpt_default.providers[gpt_default.providerID]["name"]})`));
  }, "newMsg")
});
var clearChat2 = () => {
  gpt_default.clear();
  const children = chatContent2.get_children();
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    child.destroy();
  }
};
var CommandButton2 = (command) => Button8({
  className: "sidebar-chat-chip sidebar-chat-chip-action txt txt-small",
  onClicked: () => sendMessage2(command),
  setup: setupCursorHover,
  label: command
});
var chatGPTCommands = Box13({
  className: "spacing-h-5",
  children: [
    Box13({ hexpand: true }),
    CommandButton2("/key"),
    CommandButton2("/model"),
    CommandButton2("/clear")
  ]
});
var sendMessage2 = (text) => {
  if (text.length == 0) return;
  if (gpt_default.key.length == 0) {
    gpt_default.key = text;
    chatContent2.add(SystemMessage(`Key saved to
\`${gpt_default.keyPath}\``, "API Key", chatGPTView));
    text = "";
    return;
  }
  if (text.startsWith("/")) {
    if (text.startsWith("/clear")) clearChat2();
    else if (text.startsWith("/model")) chatContent2.add(SystemMessage(`Currently using \`${gpt_default.modelName}\``, "/model", chatGPTView));
    else if (text.startsWith("/prompt")) {
      const firstSpaceIndex = text.indexOf(" ");
      const prompt = text.slice(firstSpaceIndex + 1);
      if (firstSpaceIndex == -1 || prompt.length < 1) {
        chatContent2.add(SystemMessage(`Usage: \`/prompt MESSAGE\``, "/prompt", chatGPTView));
      } else {
        gpt_default.addMessage("user", prompt);
      }
    } else if (text.startsWith("/key")) {
      const parts = text.split(" ");
      if (parts.length == 1) chatContent2.add(SystemMessage(
        `Key stored in:
\`${gpt_default.keyPath}\`
To update this key, type \`/key YOUR_API_KEY\``,
        "/key",
        chatGPTView
      ));
      else {
        gpt_default.key = parts[1];
        chatContent2.add(SystemMessage(`Updated API Key at
\`${gpt_default.keyPath}\``, "/key", chatGPTView));
      }
    } else if (text.startsWith("/test"))
      chatContent2.add(SystemMessage(markdownTest, `Markdown test`, chatGPTView));
    else
      chatContent2.add(SystemMessage(`Invalid command.`, "Error", chatGPTView));
  } else {
    gpt_default.send(text);
  }
};
var chatGPTView = Box13({
  vertical: true,
  children: [
    ProviderSwitcher(),
    Scrollable4({
      className: "sidebar-chat-viewport",
      vexpand: true,
      child: Box13({
        vertical: true,
        children: [
          GPTWelcome(),
          chatContent2
        ]
      }),
      setup: (scrolledWindow) => {
        scrolledWindow.set_policy(Gtk9.PolicyType.NEVER, Gtk9.PolicyType.AUTOMATIC);
        const vScrollbar = scrolledWindow.get_vscrollbar();
        vScrollbar.get_style_context().add_class("sidebar-scrollbar");
        Utils21.timeout(1, () => {
          const viewport = scrolledWindow.child;
          viewport.set_focus_vadjustment(new Gtk9.Adjustment(void 0));
        });
        const adjustment = scrolledWindow.get_vadjustment();
        adjustment.connect("changed", () => {
          adjustment.set_value(adjustment.get_upper() - adjustment.get_page_size());
        });
      }
    })
  ]
});

// modules/.widgetutils/clickthrough.js
import Cairo2 from "gi://cairo?version=1.0";
var dummyRegion = new Cairo2.Region();
var enableClickthrough = (self) => self.input_shape_combine_region(dummyRegion);

// modules/.commonwidgets/tabcontainer.js
import Variable3 from "resource:///com/github/Aylur/ags/variable.js";
import Widget26 from "resource:///com/github/Aylur/ags/widget.js";

// modules/.commonwidgets/cairo_navigationindicator.js
import Widget25 from "resource:///com/github/Aylur/ags/widget.js";
var { Gtk: Gtk10 } = imports.gi;
var Lang3 = imports.lang;

// modules/.commonwidgets/tabcontainer.js
var { Box: Box14, Button: Button9, EventBox: EventBox4, Label: Label9, Overlay: Overlay3, Stack } = Widget26;
var IconTabContainer = ({
  iconWidgets,
  names,
  children,
  className = "",
  setup = () => {
  },
  onChange = () => {
  },
  tabsHpack = "center",
  tabSwitcherClassName = "",
  ...rest
}) => {
  const shownIndex = Variable3(0);
  let previousShownIndex = 0;
  const count = Math.min(iconWidgets.length, names.length, children.length);
  const tabs = Box14({
    homogeneous: true,
    hpack: tabsHpack,
    className: `spacing-h-5 ${tabSwitcherClassName}`,
    children: iconWidgets.map((icon, i) => Button9({
      className: "tab-icon",
      tooltipText: names[i],
      child: icon,
      setup: setupCursorHover,
      onClicked: () => shownIndex.value = i
    })),
    setup: (self) => self.hook(shownIndex, (self2) => {
      self2.children[previousShownIndex].toggleClassName("tab-icon-active", false);
      self2.children[shownIndex.value].toggleClassName("tab-icon-active", true);
      previousShownIndex = shownIndex.value;
    })
  });
  const tabSection = Box14({
    homogeneous: true,
    children: [EventBox4({
      onScrollUp: () => mainBox.prevTab(),
      onScrollDown: () => mainBox.nextTab(),
      child: Box14({
        vertical: true,
        hexpand: true,
        children: [
          tabs
        ]
      })
    })]
  });
  const contentStack = Stack({
    transition: "slide_left_right",
    children: children.reduce((acc, currentValue, index) => {
      acc[index] = currentValue;
      return acc;
    }, {}),
    setup: (self) => self.hook(shownIndex, (self2) => {
      self2.shown = `${shownIndex.value}`;
    })
  });
  const mainBox = Box14({
    attribute: {
      children,
      shown: shownIndex,
      names
    },
    vertical: true,
    className: `spacing-v-5 ${className}`,
    setup: (self) => {
      self.pack_start(tabSection, false, false, 0);
      self.pack_end(contentStack, true, true, 0);
      setup(self);
      self.hook(shownIndex, (self2) => onChange(self2, shownIndex.value));
    },
    ...rest
  });
  mainBox.nextTab = () => shownIndex.value = Math.min(shownIndex.value + 1, count - 1);
  mainBox.prevTab = () => shownIndex.value = Math.max(shownIndex.value - 1, 0);
  mainBox.cycleTab = () => shownIndex.value = (shownIndex.value + 1) % count;
  mainBox.shown = shownIndex;
  return mainBox;
};

// modules/sideleft/apiwidgets.js
var { Gtk: Gtk11, Gdk: Gdk5 } = imports.gi;
var { Button: Button10, Label: Label10, Revealer: Revealer7, Scrollable: Scrollable5, Stack: Stack2 } = Widget27;
var TextView = Widget27.subclass(Gtk11.TextView, "AgsTextView");
var EXPAND_INPUT_THRESHOLD = 30;
var APIS = [
  {
    name: "Assistant (Gemini Pro)",
    sendCommand: sendMessage,
    contentWidget: geminiView,
    commandBar: geminiCommands,
    tabIcon: geminiTabIcon,
    placeholderText: "Message Gemini..."
  },
  {
    name: "Assistant (Groq)",
    sendCommand: sendMessage2,
    contentWidget: chatGPTView,
    commandBar: chatGPTCommands,
    tabIcon: chatGPTTabIcon,
    placeholderText: "Message the model..."
  }
  // {
  //     name: 'Waifus',
  //     sendCommand: waifuSendMessage,
  //     contentWidget: waifuView,
  //     commandBar: waifuCommands,
  //     tabIcon: waifuTabIcon,
  //     placeholderText: 'Enter tags',
  // },
  // {
  //     name: 'Booru',
  //     sendCommand: booruSendMessage,
  //     contentWidget: booruView,
  //     commandBar: booruCommands,
  //     tabIcon: booruTabIcon,
  //     placeholderText: 'Enter tags',
  // },
];
var currentApiId = 0;
function apiSendMessage(textView) {
  const buffer = textView.get_buffer();
  const [start, end] = buffer.get_bounds();
  const text = buffer.get_text(start, end, true).trimStart();
  if (!text || text.length == 0) return;
  APIS[currentApiId].sendCommand(text);
  buffer.set_text("", -1);
  chatEntryWrapper.toggleClassName("sidebar-chat-wrapper-extended", false);
  chatEntry.set_valign(Gtk11.Align.CENTER);
}
var chatEntry = TextView({
  hexpand: true,
  wrapMode: Gtk11.WrapMode.WORD_CHAR,
  acceptsTab: false,
  className: "sidebar-chat-entry txt txt-smallie",
  setup: (self) => self.hook(App, (self2, currentName, visible) => {
    if (visible && currentName === "side_chat") {
      self2.grab_focus();
    }
  }).hook(gemini_default, (self2) => {
    if (APIS[currentApiId].name != "Assistant (Gemini Pro)") return;
    self2.placeholderText = gemini_default.key.length > 0 ? "Message Gemini..." : "Enter Google AI API Key...";
  }, "hasKey").on("key-press-event", (widget, event) => {
    if (event.get_keyval()[1] === Gdk5.KEY_Return && !(event.get_state()[1] & Gdk5.ModifierType.SHIFT_MASK)) {
      apiSendMessage(widget);
      return true;
    }
  })
});
chatEntry.get_buffer().connect("changed", (buffer) => {
  const bufferText = buffer.get_text(buffer.get_start_iter(), buffer.get_end_iter(), true);
  chatSendButton.toggleClassName("sidebar-chat-send-available", bufferText.length > 0);
  chatPlaceholderRevealer.revealChild = bufferText.length == 0;
  if (buffer.get_line_count() > 1 || bufferText.length > EXPAND_INPUT_THRESHOLD) {
    chatEntryWrapper.toggleClassName("sidebar-chat-wrapper-extended", true);
    chatEntry.set_valign(Gtk11.Align.FILL);
    chatPlaceholder.set_valign(Gtk11.Align.FILL);
  } else {
    chatEntryWrapper.toggleClassName("sidebar-chat-wrapper-extended", false);
    chatEntry.set_valign(Gtk11.Align.CENTER);
    chatPlaceholder.set_valign(Gtk11.Align.CENTER);
  }
});
var chatEntryWrapper = Scrollable5({
  className: "sidebar-chat-wrapper",
  hscroll: "never",
  vscroll: "always",
  child: chatEntry
});
var chatSendButton = Button10({
  className: "txt-norm icon-material sidebar-chat-send",
  vpack: "end",
  label: "arrow_upward",
  setup: setupCursorHover,
  onClicked: (self) => {
    APIS[currentApiId].sendCommand(chatEntry.get_buffer().text);
    chatEntry.get_buffer().set_text("", -1);
  }
});
var chatPlaceholder = Label10({
  className: "txt-subtext txt-smallie margin-left-5",
  hpack: "start",
  vpack: "center",
  label: APIS[currentApiId].placeholderText
});
var chatPlaceholderRevealer = Revealer7({
  revealChild: true,
  transition: "crossfade",
  // transitionDuration: userOptions.animations.durationLarge,
  child: chatPlaceholder,
  setup: enableClickthrough
});
var textbox = Widget27.Box({
  // Entry area
  className: "sidebar-chat-textarea",
  children: [
    Widget27.Overlay({
      passThrough: true,
      child: chatEntryWrapper,
      overlays: [chatPlaceholderRevealer]
    }),
    Widget27.Box({ className: "width-10" }),
    chatSendButton
  ]
});
var apiCommandStack = Stack2({
  // transition: 'slide_up_down',
  // transitionDuration: userOptions.animations.durationLarge,
  children: APIS.reduce((acc, api) => {
    acc[api.name] = api.commandBar;
    return acc;
  }, {})
});
var apiContentStack = IconTabContainer({
  tabSwitcherClassName: "sidebar-chat-apiswitcher",
  className: "margin-top-5",
  iconWidgets: APIS.map((api) => api.tabIcon),
  names: APIS.map((api) => api.name),
  children: APIS.map((api) => api.contentWidget),
  onChange: (self, id) => {
    apiCommandStack.shown = APIS[id].name;
    chatPlaceholder.label = APIS[id].placeholderText;
    currentApiId = id;
  }
});
var apiWidgets = Widget27.Box({
  vertical: true,
  homogeneous: false,
  children: [
    apiContentStack,
    apiCommandStack,
    textbox
  ]
});

// modules/sideleft/tools/quickscripts.js
import App11 from "resource:///com/github/Aylur/ags/app.js";
import Widget29 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils22 from "resource:///com/github/Aylur/ags/utils.js";

// modules/sideleft/tools/module.js
import Widget28 from "resource:///com/github/Aylur/ags/widget.js";
var { Box: Box15, Button: Button11, Label: Label11, Revealer: Revealer8 } = Widget28;
var module_default = ({
  icon,
  name,
  child,
  revealChild = true
}) => {
  const headerButtonIcon = MaterialIcon(revealChild ? "expand_less" : "expand_more", "norm");
  const header = Button11({
    onClicked: () => {
      content.revealChild = !content.revealChild;
      headerButtonIcon.label = content.revealChild ? "expand_less" : "expand_more";
    },
    setup: setupCursorHover,
    child: Box15({
      className: "txt spacing-h-10",
      children: [
        icon,
        Label11({
          className: "txt-norm",
          label: `${name}`
        }),
        Box15({
          hexpand: true
        }),
        Box15({
          className: "sidebar-module-btn-arrow",
          homogeneous: true,
          children: [headerButtonIcon]
        })
      ]
    })
  });
  const content = Revealer8({
    revealChild,
    // transition: 'slide_down',
    // transitionDuration: userOptions.animations.durationLarge,
    child: Box15({
      className: "margin-top-5",
      homogeneous: true,
      children: [child]
    })
  });
  return Box15({
    className: "sidebar-module",
    vertical: true,
    children: [
      header,
      content
    ]
  });
};

// modules/sideleft/tools/quickscripts.js
var { Gtk: Gtk12 } = imports.gi;
var { execAsync: execAsync17, exec: exec9 } = Utils22;
var { Box: Box16, Button: Button12, EventBox: EventBox5, Icon: Icon5, Label: Label12, Scrollable: Scrollable6 } = Widget29;
var scripts = [
  {
    icon: "nixos-symbolic",
    name: "Trim system generations to 5",
    command: `sudo ${App11.configDir}/scripts/quickscripts/nixos-trim-generations.sh 5 0 system`,
    enabled: distroID == "nixos"
  },
  {
    icon: "nixos-symbolic",
    name: "Trim home manager generations to 5",
    command: `${App11.configDir}/scripts/quickscripts/nixos-trim-generations.sh 5 0 home-manager`,
    enabled: distroID == "nixos"
  },
  {
    icon: "ubuntu-symbolic",
    name: "Update packages",
    command: `sudo apt update && sudo apt upgrade -y`,
    enabled: isDebianDistro
  },
  {
    icon: "fedora-symbolic",
    name: "Update packages",
    command: `sudo dnf upgrade -y`,
    enabled: distroID == "fedora"
  },
  {
    icon: "arch-symbolic",
    name: "Update packages",
    command: `sudo pacman -Syyu`,
    enabled: isArchDistro
  },
  {
    icon: "flatpak-symbolic",
    name: "Uninstall unused flatpak packages",
    command: `flatpak uninstall --unused`,
    enabled: hasFlatpak
  }
];
var quickscripts_default = () => module_default({
  icon: MaterialIcon("code", "norm"),
  name: "Quick scripts",
  child: Box16({
    vertical: true,
    className: "spacing-v-5",
    children: scripts.map((script) => {
      if (!script.enabled) return null;
      const scriptStateIcon = MaterialIcon("not_started", "norm");
      return Box16({
        className: "spacing-h-5 txt",
        children: [
          Icon5({
            className: "sidebar-module-btn-icon txt-large",
            icon: script.icon
          }),
          Label12({
            className: "txt-small",
            hpack: "start",
            hexpand: true,
            label: script.name,
            tooltipText: script.command
          }),
          Button12({
            className: "sidebar-module-scripts-button",
            child: scriptStateIcon,
            onClicked: () => {
              App11.closeWindow("side_utils");
              execAsync17([`bash`, `-c`, `${userOptions.apps.terminal} fish -C "${script.command}"`]).catch(print).then(() => {
                scriptStateIcon.label = "done";
              });
            },
            setup: setupCursorHover
          })
        ]
      });
    })
  })
});

// modules/sideleft/tools/colorpicker.js
import App12 from "resource:///com/github/Aylur/ags/app.js";
import Variable4 from "resource:///com/github/Aylur/ags/variable.js";
import Widget30 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils24 from "resource:///com/github/Aylur/ags/utils.js";

// modules/sideleft/tools/color.js
import Service5 from "resource:///com/github/Aylur/ags/service.js";
import * as Utils23 from "resource:///com/github/Aylur/ags/utils.js";

// modules/.miscutils/mathfuncs.js
function clamp(x, min, max) {
  return Math.min(Math.max(x, min), max);
}

// modules/sideleft/tools/color.js
var { Gio: Gio5, GLib: GLib11 } = imports.gi;
var { exec: exec10, execAsync: execAsync18 } = Utils23;
var ColorPickerSelection = class extends Service5 {
  static {
    Service5.register(this, {
      "picked": [],
      "assigned": ["int"],
      "hue": [],
      "sl": []
    });
  }
  _hue = 198;
  _xAxis = 94;
  _yAxis = 80;
  get hue() {
    return this._hue;
  }
  set hue(value) {
    this._hue = clamp(value, 0, 360);
    this.emit("hue");
    this.emit("picked");
    this.emit("changed");
  }
  get xAxis() {
    return this._xAxis;
  }
  set xAxis(value) {
    this._xAxis = clamp(value, 0, 100);
    this.emit("sl");
    this.emit("picked");
    this.emit("changed");
  }
  get yAxis() {
    return this._yAxis;
  }
  set yAxis(value) {
    this._yAxis = clamp(value, 0, 100);
    this.emit("sl");
    this.emit("picked");
    this.emit("changed");
  }
  setColorFromHex(hexString, id) {
    const hsl = hexToHSL(hexString);
    this._hue = hsl.hue;
    this._xAxis = hsl.saturation;
    this._yAxis = (100 - hsl.saturation / 2) / 100 * hsl.lightness;
    this.emit("assigned", id);
    this.emit("changed");
  }
  constructor() {
    super();
    this.emit("changed");
  }
};
function hslToRgbValues(h, s, l) {
  h /= 360;
  s /= 100;
  l /= 100;
  let r, g, b;
  if (s === 0) {
    r = g = b = l;
  } else {
    const hue2rgb = (p2, q2, t) => {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p2 + (q2 - p2) * 6 * t;
      if (t < 1 / 2) return q2;
      if (t < 2 / 3) return p2 + (q2 - p2) * (2 / 3 - t) * 6;
      return p2;
    };
    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    const p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  const to255 = (x) => Math.round(x * 255);
  r = to255(r);
  g = to255(g);
  b = to255(b);
  return `${Math.round(r)},${Math.round(g)},${Math.round(b)}`;
}
function hslToHex(h, s, l) {
  h /= 360;
  s /= 100;
  l /= 100;
  let r, g, b;
  if (s === 0) {
    r = g = b = l;
  } else {
    const hue2rgb = (p2, q2, t) => {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p2 + (q2 - p2) * 6 * t;
      if (t < 1 / 2) return q2;
      if (t < 2 / 3) return p2 + (q2 - p2) * (2 / 3 - t) * 6;
      return p2;
    };
    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    const p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  const toHex = (x) => {
    const hex = Math.round(x * 255).toString(16);
    return hex.length === 1 ? "0" + hex : hex;
  };
  return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
}
function hexToHSL(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  var r = parseInt(result[1], 16);
  var g = parseInt(result[2], 16);
  var b = parseInt(result[3], 16);
  r /= 255, g /= 255, b /= 255;
  var max = Math.max(r, g, b), min = Math.min(r, g, b);
  var h, s, l = (max + min) / 2;
  if (max == min) {
    h = s = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  s = s * 100;
  s = Math.round(s);
  l = l * 100;
  l = Math.round(l);
  h = Math.round(360 * h);
  return {
    hue: h,
    saturation: s,
    lightness: l
  };
}

// modules/sideleft/tools/colorpicker.js
var { Gtk: Gtk13 } = imports.gi;
var { execAsync: execAsync20, exec: exec11 } = Utils24;
var { Box: Box17, Button: Button13, Entry, EventBox: EventBox6, Icon: Icon6, Label: Label13, Overlay: Overlay4, Scrollable: Scrollable7 } = Widget30;
var colorpicker_default = () => {
  const selectedColor = new ColorPickerSelection();
  function shouldUseBlackColor() {
    return (selectedColor.xAxis < 40 || 45 <= selectedColor.hue && selectedColor.hue <= 195) && selectedColor.yAxis > 60;
  }
  const colorBlack = "rgba(0,0,0,0.9)";
  const colorWhite = "rgba(255,255,255,0.9)";
  const hueRange = Box17({
    homogeneous: true,
    className: "sidebar-module-colorpicker-wrapper",
    children: [Box17({
      className: "sidebar-module-colorpicker-hue",
      css: `background: linear-gradient(to bottom, #ff6666, #ffff66, #66dd66, #66ffff, #6666ff, #ff66ff, #ff6666);`
    })]
  });
  const hueSlider = Box17({
    vpack: "start",
    className: "sidebar-module-colorpicker-cursorwrapper",
    css: `margin-top: ${13.636 * selectedColor.hue / 360}rem;`,
    homogeneous: true,
    children: [Box17({
      className: "sidebar-module-colorpicker-hue-cursor"
    })],
    setup: (self) => self.hook(selectedColor, () => {
      const widgetHeight = hueRange.children[0].get_allocated_height();
      self.setCss(`margin-top: ${13.636 * selectedColor.hue / 360}rem;`);
    })
  });
  const hueSelector = Box17({
    children: [EventBox6({
      child: Overlay4({
        child: hueRange,
        overlays: [hueSlider]
      }),
      attribute: {
        clicked: false,
        setHue: (self, event) => {
          const widgetHeight = hueRange.children[0].get_allocated_height();
          const [_, cursorX, cursorY] = event.get_coords();
          const cursorYPercent = clamp(cursorY / widgetHeight, 0, 1);
          selectedColor.hue = Math.round(cursorYPercent * 360);
        }
      },
      setup: (self) => self.on("motion-notify-event", (self2, event) => {
        if (!self2.attribute.clicked) return;
        self2.attribute.setHue(self2, event);
      }).on("button-press-event", (self2, event) => {
        if (!(event.get_button()[1] === 1)) return;
        self2.attribute.clicked = true;
        self2.attribute.setHue(self2, event);
      }).on("button-release-event", (self2) => self2.attribute.clicked = false)
    })]
  });
  const saturationAndLightnessRange = Box17({
    homogeneous: true,
    children: [Box17({
      className: "sidebar-module-colorpicker-saturationandlightness",
      attribute: {
        update: (self) => {
          self.setCss(`background: 
                    linear-gradient(to bottom, rgba(0,0,0,0), rgba(0,0,0,1)),
                    linear-gradient(to right, #ffffff, ${hslToHex(selectedColor.hue, 100, 50)});
                    `);
        }
      },
      setup: (self) => self.hook(selectedColor, self.attribute.update, "hue").hook(selectedColor, self.attribute.update, "assigned")
    })]
  });
  const saturationAndLightnessCursor = Box17({
    className: "sidebar-module-colorpicker-saturationandlightness-cursorwrapper",
    children: [Box17({
      vpack: "start",
      hpack: "start",
      homogeneous: true,
      css: `
                margin-left: ${13.636 * selectedColor.xAxis / 100}rem;
                margin-top: ${13.636 * (100 - selectedColor.yAxis) / 100}rem;
            `,
      // Why 13.636rem? see class name in stylesheet
      attribute: {
        update: (self) => {
          const allocation = saturationAndLightnessRange.children[0].get_allocation();
          self.setCss(`
                        margin-left: ${13.636 * selectedColor.xAxis / 100}rem;
                        margin-top: ${13.636 * (100 - selectedColor.yAxis) / 100}rem;
                    `);
        }
      },
      setup: (self) => self.hook(selectedColor, self.attribute.update, "sl").hook(selectedColor, self.attribute.update, "assigned"),
      children: [Box17({
        className: "sidebar-module-colorpicker-saturationandlightness-cursor",
        css: `
                    background-color: ${hslToHex(selectedColor.hue, selectedColor.xAxis, selectedColor.yAxis / (1 + selectedColor.xAxis / 100))};
                    border-color: ${shouldUseBlackColor() ? colorBlack : colorWhite};
                `,
        attribute: {
          update: (self) => {
            self.setCss(`
                            background-color: ${hslToHex(selectedColor.hue, selectedColor.xAxis, selectedColor.yAxis / (1 + selectedColor.xAxis / 100))};
                            border-color: ${shouldUseBlackColor() ? colorBlack : colorWhite};
                        `);
          }
        },
        setup: (self) => self.hook(selectedColor, self.attribute.update, "sl").hook(selectedColor, self.attribute.update, "hue").hook(selectedColor, self.attribute.update, "assigned")
      })]
    })]
  });
  const saturationAndLightnessSelector = Box17({
    homogeneous: true,
    className: "sidebar-module-colorpicker-saturationandlightness-wrapper",
    children: [EventBox6({
      child: Overlay4({
        child: saturationAndLightnessRange,
        overlays: [saturationAndLightnessCursor]
      }),
      attribute: {
        clicked: false,
        setSaturationAndLightness: (self, event) => {
          const allocation = saturationAndLightnessRange.children[0].get_allocation();
          const [_, cursorX, cursorY] = event.get_coords();
          const cursorXPercent = clamp(cursorX / allocation.width, 0, 1);
          const cursorYPercent = clamp(cursorY / allocation.height, 0, 1);
          selectedColor.xAxis = Math.round(cursorXPercent * 100);
          selectedColor.yAxis = Math.round(100 - cursorYPercent * 100);
        }
      },
      setup: (self) => self.on("motion-notify-event", (self2, event) => {
        if (!self2.attribute.clicked) return;
        self2.attribute.setSaturationAndLightness(self2, event);
      }).on("button-press-event", (self2, event) => {
        if (!(event.get_button()[1] === 1)) return;
        self2.attribute.clicked = true;
        self2.attribute.setSaturationAndLightness(self2, event);
      }).on("button-release-event", (self2) => self2.attribute.clicked = false)
    })]
  });
  const resultColorBox = Box17({
    className: "sidebar-module-colorpicker-result-box",
    homogeneous: true,
    css: `background-color: ${hslToHex(selectedColor.hue, selectedColor.xAxis, selectedColor.yAxis / (1 + selectedColor.xAxis / 100))};`,
    children: [Label13({
      className: "txt txt-small",
      label: "Result"
    })],
    attribute: {
      update: (self) => {
        self.setCss(`background-color: ${hslToHex(selectedColor.hue, selectedColor.xAxis, selectedColor.yAxis / (1 + selectedColor.xAxis / 100))};`);
        self.children[0].setCss(`color: ${shouldUseBlackColor() ? colorBlack : colorWhite};`);
      }
    },
    setup: (self) => self.hook(selectedColor, self.attribute.update, "sl").hook(selectedColor, self.attribute.update, "hue").hook(selectedColor, self.attribute.update, "assigned")
  });
  const ResultBox = ({ colorSystemName, updateCallback, copyCallback }) => Box17({
    children: [
      Box17({
        vertical: true,
        hexpand: true,
        children: [
          Label13({
            xalign: 0,
            className: "txt-tiny",
            label: colorSystemName
          }),
          Overlay4({
            child: Entry({
              widthChars: 10,
              className: "txt-small techfont",
              attribute: {
                id: 0,
                update: updateCallback
              },
              setup: (self) => self.hook(selectedColor, self.attribute.update, "sl").hook(selectedColor, self.attribute.update, "hue").hook(selectedColor, self.attribute.update, "assigned")
            })
          })
        ]
      }),
      Button13({
        child: MaterialIcon("content_copy", "norm"),
        onClicked: (self) => {
          copyCallback(self);
          self.child.label = "done";
          Utils24.timeout(1e3, () => self.child.label = "content_copy");
        },
        setup: setupCursorHover
      })
    ]
  });
  const resultHex = ResultBox({
    colorSystemName: "Hex",
    updateCallback: (self, id) => {
      if (id && self.attribute.id === id) return;
      self.text = hslToHex(selectedColor.hue, selectedColor.xAxis, selectedColor.yAxis / (1 + selectedColor.xAxis / 100));
    },
    copyCallback: () => Utils24.execAsync(["wl-copy", `${hslToHex(selectedColor.hue, selectedColor.xAxis, selectedColor.yAxis / (1 + selectedColor.xAxis / 100))}`])
  });
  const resultRgb = ResultBox({
    colorSystemName: "RGB",
    updateCallback: (self, id) => {
      if (id && self.attribute.id === id) return;
      self.text = hslToRgbValues(selectedColor.hue, selectedColor.xAxis, selectedColor.yAxis / (1 + selectedColor.xAxis / 100));
    },
    copyCallback: () => Utils24.execAsync(["wl-copy", `rgb(${hslToRgbValues(selectedColor.hue, selectedColor.xAxis, selectedColor.yAxis / (1 + selectedColor.xAxis / 100))})`])
  });
  const resultHsl = ResultBox({
    colorSystemName: "HSL",
    updateCallback: (self, id) => {
      if (id && self.attribute.id === id) return;
      self.text = `${selectedColor.hue},${selectedColor.xAxis}%,${Math.round(selectedColor.yAxis / (1 + selectedColor.xAxis / 100))}%`;
    },
    copyCallback: () => Utils24.execAsync(["wl-copy", `hsl(${selectedColor.hue},${selectedColor.xAxis}%,${Math.round(selectedColor.yAxis / (1 + selectedColor.xAxis / 100))}%)`])
  });
  const result = Box17({
    className: "sidebar-module-colorpicker-result-area spacing-v-5 txt",
    hexpand: true,
    vertical: true,
    children: [
      resultColorBox,
      resultHex,
      resultRgb,
      resultHsl
    ]
  });
  return module_default({
    icon: MaterialIcon("colorize", "norm"),
    name: "Color picker",
    revealChild: false,
    child: Box17({
      className: "spacing-h-5",
      children: [
        hueSelector,
        saturationAndLightnessSelector,
        result
      ]
    })
  });
};

// modules/sideleft/tools/materialswitch.js
import App13 from "resource:///com/github/Aylur/ags/app.js";
import Widget31 from "resource:///com/github/Aylur/ags/widget.js";
import * as Utils25 from "resource:///com/github/Aylur/ags/utils.js";
var { execAsync: execAsync21 } = Utils25;
var { Box: Box18, Button: Button14, Icon: Icon7, Label: Label14 } = Widget31;
var materialswitch_default = () => module_default({
  icon: MaterialIcon("colorize", "norm"),
  name: "Material picker",
  child: Box18({
    vertical: true,
    className: "spacing-v-5",
    children: [
      Box18({
        className: "spacing-h-5 txt",
        children: [
          Icon7({
            className: "sidebar-module-btn-icon txt-large"
          }),
          Label14({
            className: "txt-small",
            hpack: "start",
            hexpand: true,
            label: "Click the button to proceed"
          }),
          Button14({
            className: "sidebar-module-scripts-button",
            label: "(+)",
            onClicked: () => {
              App13.closeWindow("side_utils");
              execAsync21([`bash`, `-c`, `$HOME/.config/ags/scripts/color_generation/switchcolor.sh`]).catch(print);
            }
          })
        ]
      }),
      Box18({
        className: "spacing-h-5 txt",
        children: [
          Icon7({
            className: "sidebar-module-btn-icon txt-large"
          }),
          Label14({
            className: "txt-small",
            hpack: "start",
            hexpand: true,
            label: "Click to restart the ags widgets"
          }),
          Button14({
            className: "sidebar-module-scripts-button",
            label: "(+)",
            onClicked: () => {
              execAsync21([`bash`, `-c`, `killall ags && ags &`]).catch(print);
            }
          })
        ]
      })
    ]
  })
});

// modules/sideleft/notificationlist.js
import Widget32 from "resource:///com/github/Aylur/ags/widget.js";
import Notifications3 from "resource:///com/github/Aylur/ags/service/notifications.js";
import * as Utils26 from "resource:///com/github/Aylur/ags/utils.js";
var { Box: Box19, Button: Button15, Label: Label15, Scrollable: Scrollable8, Stack: Stack3 } = Widget32;
var notificationlist_default = (props) => {
  const notifEmptyContent = Box19({
    homogeneous: true,
    children: [Box19({
      vertical: true,
      vpack: "center",
      className: "txt spacing-v-10",
      children: [
        Box19({
          vertical: true,
          className: "spacing-v-5",
          children: [
            MaterialIcon("notifications_active", "gigantic"),
            Label15({ label: "No notifications", className: "txt-small" })
          ]
        })
      ]
    })]
  });
  const notificationList = Box19({
    vertical: true,
    vpack: "start",
    className: "spacing-v-5-revealer",
    setup: (self) => self.hook(Notifications3, (box, id) => {
      if (box.get_children().length == 0) {
        Notifications3.notifications.forEach((n) => {
          box.pack_end(notification_default({
            notifObject: n,
            isPopup: false
          }), false, false, 0);
        });
        box.show_all();
        return;
      }
      const notif = Notifications3.getNotification(id);
      const NewNotif = notification_default({
        notifObject: notif,
        isPopup: false
      });
      if (NewNotif) {
        box.pack_end(NewNotif, false, false, 0);
        box.show_all();
      }
    }, "notified").hook(Notifications3, (box, id) => {
      if (!id) return;
      for (const ch of box.children) {
        if (ch._id === id) {
          ch.attribute.destroyWithAnims();
        }
      }
    }, "closed")
  });
  const ListActionButton = (icon, name, action) => Button15({
    className: "notif-listaction-btn",
    onClicked: action,
    child: Box19({
      className: "spacing-h-5",
      children: [
        MaterialIcon(icon, "norm"),
        Label15({
          className: "txt-small",
          label: name
        })
      ]
    }),
    setup: setupCursorHover
  });
  const silenceButton = ListActionButton("notifications_paused", "Silence", (self) => {
    Notifications3.dnd = !Notifications3.dnd;
    self.toggleClassName("notif-listaction-btn-enabled", Notifications3.dnd);
  });
  const clearButton = ListActionButton("clear_all", "Clear", () => {
    Notifications3.clear();
    notificationList.get_children().forEach((ch) => ch.attribute.destroyWithAnims());
    Utils26.timeout(800, () => {
      App.closeWindow("side_chat");
    });
  });
  const listTitle = Box19({
    vpack: "start",
    className: "sidebar-group-invisible txt spacing-h-5",
    children: [
      Label15({
        hexpand: true,
        xalign: 0,
        className: "txt-title-small margin-left-10",
        // ^ (extra margin on the left so that it looks similarly spaced
        // when compared to borderless "Clear" button on the right)
        label: "Notifications"
      }),
      silenceButton,
      clearButton
    ]
  });
  const notifList = Scrollable8({
    hexpand: true,
    hscroll: "never",
    vscroll: "automatic",
    child: Box19({
      vexpand: true,
      // homogeneous: true,
      children: [notificationList]
    }),
    setup: (self) => {
      const vScrollbar = self.get_vscrollbar();
      vScrollbar.get_style_context().add_class("sidebar-scrollbar");
    }
  });
  const listContents = Stack3({
    // transition: 'crossfade',
    // transitionDuration: userOptions.animations.durationLarge,
    children: {
      "empty": notifEmptyContent,
      "list": notifList
    },
    setup: (self) => self.hook(Notifications3, (self2) => self2.shown = Notifications3.notifications.length > 0 ? "list" : "empty")
  });
  return Box19({
    ...props,
    className: "sidebar-group spacing-v-5",
    vertical: true,
    children: [
      listTitle,
      listContents
    ]
  });
};

// modules/sideleft/main.js
var { Box: Box20, Revealer: Revealer9, Window: Window2, Scrollable: Scrollable9 } = Widget33;
var toolbox = Scrollable9({
  hscroll: "never",
  vscroll: "automatic",
  hexpand: false,
  css: `min-width: ${SCREEN_WIDTH * 0.1}px`,
  child: Box20({
    vertical: true,
    className: "side_chat",
    children: [
      quickscripts_default(),
      colorpicker_default(),
      materialswitch_default(),
      notificationlist_default()
    ]
  })
});
var widgetContent = Revealer9({
  revealChild: true,
  css: `min-width: ${SCREEN_WIDTH * 0.7}px;`,
  child: apiWidgets
});
var side_chats = Box20({
  // vertical: true,
  // className: "side_chat",
  vexpand: false,
  hexpand: false,
  css: `min-width: ${SCREEN_WIDTH}px;`,
  children: [
    toolbox,
    Box20({ css: `min-width: ${SCREEN_WIDTH * 0.2}px` }),
    widgetContent
  ]
});
var main_default3 = () => Window2({
  // className:"side_chat",
  visible: false,
  keymode: "exclusive",
  anchor: ["bottom", "top", "left"],
  name: "side_chat",
  layer: "overlay",
  child: side_chats
});

// config.js
var range = (length, start = 1) => Array.from({ length }, (_, i) => i + start);
function forMonitors(widget) {
  const n = Gdk6.Display.get_default()?.get_n_monitors() || 1;
  return range(n, 0).map(widget).flat(1);
}
var Windows = () => [
  // Lockscreen(),
  // Overview(),
  forMonitors(main_default),
  main_default3(),
  // side_utils(),
  // Osk(),
  main_default2()
];
App14.config({
  style: `${App14.configDir}/style.css`,
  // stackTraceOnError: true,
  windows: Windows().flat(1)
});
forMonitors(Bar);
