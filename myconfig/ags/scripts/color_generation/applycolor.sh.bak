#!/usr/bin/env bash

term_alpha=100 #Set this to < 100 make all your terminals transparent
# sleep 0 # idk i wanted some delay or colors dont get applied properly
if [ ! -d "$HOME"/.cache/ags/user/generated ]; then
    mkdir -p "$HOME"/.cache/ags/user/generated
fi
cd "$HOME/.config/ags" || exit

colornames=''
colorstrings=''
colorlist=()
colorvalues=()

# wallpath=$(swww query | head -1 | awk -F 'image: ' '{print $2}')
# wallpath_png="$HOME"'/.cache/ags/user/generated/hypr/lockscreen.png'
# convert "$wallpath" "$wallpath_png"
# wallpath_png=$(echo "$wallpath_png" | sed 's/\//\\\//g')
# wallpath_png=$(sed 's/\//\\\\\//g' <<< "$wallpath_png")

transparentize() {
  local hex="$1"
  local alpha="$2"
  local red green blue

  red=$((16#${hex:1:2}))
  green=$((16#${hex:3:2}))
  blue=$((16#${hex:5:2}))

  printf 'rgba(%d, %d, %d, %.2f)\n' "$red" "$green" "$blue" "$alpha"
}

get_light_dark() {
    lightdark=""
    if [ ! -f "$HOME"/.cache/ags/user/colormode.txt ]; then
        echo "" > "$HOME"/.cache/ags/user/colormode.txt
    else
        lightdark=$(sed -n '1p' "$HOME/.cache/ags/user/colormode.txt")
    fi
    echo "$lightdark"
}

apply_fuzzel() {
    # Check if scripts/templates/fuzzel/fuzzel.ini exists
    if [ ! -f "scripts/templates/fuzzel/fuzzel.ini" ]; then
        echo "Template file not found for Fuzzel. Skipping that."
        return
    fi
    # Copy template
    mkdir -p "$HOME"/.cache/ags/user/generated/fuzzel
    cp "scripts/templates/fuzzel/fuzzel.ini" "$HOME"/.cache/ags/user/generated/fuzzel/fuzzel.ini
    # Apply colors
    for i in "${!colorlist[@]}"; do
        sed -i "s/{{ ${colorlist[$i]} }}/${colorvalues[$i]#\#}/g" "$HOME"/.cache/ags/user/generated/fuzzel/fuzzel.ini
    done

    cp  "$HOME"/.cache/ags/user/generated/fuzzel/fuzzel.ini "$HOME"/.config/fuzzel/fuzzel.ini
}

apply_hyprland() {
    # Check if scripts/templates/hypr/hyprland/colors.conf exists
    if [ ! -f "scripts/templates/hypr/hyprland/colors.conf" ]; then
        echo "Template file not found for Hyprland colors. Skipping that."
        return
    fi
    # Copy template
    mkdir -p "$HOME"/.cache/ags/user/generated/hypr/hyprland
    cp "scripts/templates/hypr/hyprland/colors.conf" "$HOME"/.cache/ags/user/generated/hypr/hyprland/colors.conf
    # Apply colors
    for i in "${!colorlist[@]}"; do
        sed -i "s/{{ ${colorlist[$i]} }}/${colorvalues[$i]#\#}/g" "$HOME"/.cache/ags/user/generated/hypr/hyprland/colors.conf
    done

    cp "$HOME"/.cache/ags/user/generated/hypr/hyprland/colors.conf "$HOME"/.config/hypr/hyprland/colors.conf
}

apply_hyprlock() {
    # Check if scripts/templates/hypr/hyprlock.conf exists
    if [ ! -f "scripts/templates/hypr/hyprlock.conf" ]; then
        echo "Template file not found for hyprlock. Skipping that."
        return
    fi
    # Copy template
    mkdir -p "$HOME"/.cache/ags/user/generated/hypr/
    cp "scripts/templates/hypr/hyprlock.conf" "$HOME"/.cache/ags/user/generated/hypr/hyprlock.conf
    # Apply colors
    # sed -i "s/{{ SWWW_WALL }}/${wallpath_png}/g" "$HOME"/.cache/ags/user/generated/hypr/hyprlock.conf
    for i in "${!colorlist[@]}"; do
        sed -i "s/{{ ${colorlist[$i]} }}/${colorvalues[$i]#\#}/g" "$HOME"/.cache/ags/user/generated/hypr/hyprlock.conf
    done

    cp "$HOME"/.cache/ags/user/generated/hypr/hyprlock.conf "$HOME"/.config/hypr/hyprlock.conf
}

apply_gtk() { # Using gradience-cli
    lightdark=$(get_light_dark)

    # Copy template
    mkdir -p "$HOME"/.cache/ags/user/generated/gradience
    cp "scripts/templates/gradience/preset.json" "$HOME"/.cache/ags/user/generated/gradience/preset.json

    # Apply colors
    for i in "${!colorlist[@]}"; do
        sed -i "s/{{ ${colorlist[$i]} }}/${colorvalues[$i]}/g" "$HOME"/.cache/ags/user/generated/gradience/preset.json
    done

    mkdir -p "$HOME/.config/presets" # create gradience presets folder
    gradience-cli apply -p "$HOME"/.cache/ags/user/generated/gradience/preset.json --gtk both

    # Set light/dark preference
    # And set GTK theme manually as Gradience defaults to light adw-gtk3
    # (which is unreadable when broken when you use dark mode)
    if [ "$lightdark" = "light" ]; then
        gsettings set org.gnome.desktop.interface gtk-theme 'adw-gtk3'
        gsettings set org.gnome.desktop.interface color-scheme 'prefer-light'
    else
        gsettings set org.gnome.desktop.interface gtk-theme adw-gtk3-dark
        gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
    fi
}

apply_ags() {
    sass "$HOME"/.config/ags/scss/main.scss "$HOME"/.cache/ags/user/generated/style.css
    ags run-js 'openColorScheme.value = true; Utils.timeout(2000, () => openColorScheme.value = false);'
    ags run-js "App.applyCss('${HOME}/.cache/ags/user/generated/style.css');"

}

if [[ "$1" = "--bad-apple" ]]; then
    lightdark=$(get_light_dark)
    cp scripts/color_generation/specials/_material_badapple"${lightdark}".scss scss/_material.scss
    colornames=$(cat scripts/color_generation/specials/_material_badapple"${lightdark}".scss | cut -d: -f1)
    colorstrings=$(cat scripts/color_generation/specials/_material_badapple"${lightdark}".scss | cut -d: -f2 | cut -d ' ' -f2 | cut -d ";" -f1)
    IFS=$'\n'
    colorlist=( $colornames ) # Array of color names
    colorvalues=( $colorstrings ) # Array of color values
else
    colornames=$(cat scss/_material.scss | cut -d: -f1)
    colorstrings=$(cat scss/_material.scss | cut -d: -f2 | cut -d ' ' -f2 | cut -d ";" -f1)
    IFS=$'\n'
    colorlist=( $colornames ) # Array of color names
    colorvalues=( $colorstrings ) # Array of color values
fi
apply_stuff(){


    # Check if terminal escape sequence template exists
    if [ ! -f "scripts/templates/terminal/sequences.txt" ]; then
        echo "Template file not found for Terminal. Skipping that."
        return
    fi
    # Copy template
    mkdir -p "$HOME"/.cache/ags/user/generated/terminal
    cp "scripts/templates/terminal/sequences.txt" "$HOME"/.cache/ags/user/generated/terminal/sequences.txt
    # check if onedark plugin exist 
    if [ -d "$HOME/.local/share/nvim/lazy/onedark.nvim" ]; then
# apply colors for neovim background 
# if the folder exist then do the operations
mv $HOME/.local/share/nvim/lazy/onedark.nvim/lua/onedark/palette.lua $HOME/.local/share/nvim/lazy/onedark.nvim/lua/onedark/palette.lua.bak
echo "return {
	dark = {
		black = \"#1a212e\",
		bg0 = \"${colorvalues[7]}\",
		bg1 = \"#31353f\",
		bg2 = \"#393f4a\",
		bg3 = \"#3b3f4c\",
		bg_d = \"#21252b\",
		bg_blue = \"#73b8f1\",
		bg_yellow = \"#ebd09c\",
		fg = \"${colorvalues[19]}\",
		purple = \"#c678dd\",
		green = \"#98c379\",
		orange = \"#d19a66\",
		blue = \"#61afef\",
		yellow =\"#e5c07b\",
		cyan = \"#56b6c2\",
		red = \"#e86671\",
		grey = \"#5c6370\",
		light_grey = \"#848b98\",
		dark_cyan = \"#2b6f77\",
		dark_red = \"#993939\",
		dark_yellow = \"#93691d\",
		dark_purple = \"#8a3fa0\",
		diff_add = \"#31392b\",
		diff_delete = \"#382b2c\",
		diff_change = \"#1c3448\",
		diff_text = \"#2c5372\",
	}
} " > $HOME/.local/share/nvim/lazy/onedark.nvim/lua/onedark/palette.lua
echo "
local Colors = {
  itagbg          = '${colorvalues[45]}',
  bbg   = '${colorvalues[7]}',
  brightgreen    = '${colorvalues[26]}',
  darkestcyan    = '${colorvalues[37]}',
  darkred        = '${colorvalues[44]}',
  ifg          = '${colorvalues[19]}',
  brightred      = '${colorvalues[53]}',
  brightorange   = '${colorvalues[34]}',
  gray1          = '#262626',
  cmdbg          = '${colorvalues[2]}',
  gray5          = '${colorvalues[29]}',
  gray10         = '#f0f0f0',
  cmdfg          = '${colorvalues[49]}',
}
local M = {
  normal = {
    a = { fg = Colors.bbg, bg = Colors.brightgreen, gui = 'bold' },
    c = { fg = Colors.brightgreen, bg = Colors.bbg },
  },
  insert = {
    a = { fg = Colors.darkestcyan, bg = Colors.itagbg, gui = 'bold' },
    c = { fg = Colors.ifg, bg = Colors.bbg },
  },
  visual = { a = { fg = Colors.darkred, bg = Colors.brightorange, gui = 'bold' } },
  replace = { a = { fg = Colors.bbg, bg = Colors.brightred, gui = 'bold' } },
  inactive = {
    a = { fg = Colors.gray1, bg = Colors.gray5, gui = 'bold' },
    b = { fg = Colors.gray1, bg = Colors.gray5 },
    c = { bg = Colors.gray1, fg = Colors.brightgreen },
  },
	command = { a = { fg = Colors.bbg, bg = Colors.cmdbg, gui = 'bold' } },

}

M.terminal = M.insert

return M

" > $HOME/.config/nvim/lua/config/powerline.lua
          else 
		  #if it doesn't exist then 
		  notify-send "onedark please install them for neovim material themes support\n link onedark: https://github.com/antkss/onedark.nvim"
    fi

##############apply for foot #################################
if [ -d "$HOME/.config/foot" ]; then
	if [[ -z $(cat $HOME/.config/foot/foot.ini | grep /.config/foot/colors.ini) ]]; then
		echo "[main]
include=~/.config/foot/colors.ini" >> $HOME/.config/foot/foot.ini
	fi
echo "
[colors]
background=${colorvalues[7]:1}
foreground=ffffff
flash=7f7f00
regular0=0x696969   
regular1=0xFF2400 
regular2=0x03C03C
regular3=0xFDFF00
regular4=0x${colorvalues[27]:1} 
regular5=0xFF1493 
regular6=0x00CCCC  
regular7=0xffffff  
" > "$HOME"/.config/foot/colors.ini
fi
echo "
[colors.normal]
black = \"0x10100E\"
blue = \"0x${colorvalues[27]:1}\"
cyan = \"0x20B2AA\"
green = \"0x${colorvalues[2]:1}\"
magenta = \"0x9A4EAE\"
red = \"0x${colorvalues[2]:1}\"
white = \"0x${colorvalues[20]:1}\"
yellow = \"0x${colorvalues[53]:1}\"
[colors.primary]
background = \"0x${colorvalues[7]:1}\"
foreground = \"0xcbe3e7\"
" > "$HOME"/.config/alacritty/color.toml
#
# for i in "${!colorlist[@]}"; do
#  echo "${colorlist[$i]}:[$i] ${colorvalues[$i]}"
# done

}
apply_ags
apply_stuff 
apply_hyprland 
apply_hyprlock 
apply_gtk 
apply_fuzzel 
